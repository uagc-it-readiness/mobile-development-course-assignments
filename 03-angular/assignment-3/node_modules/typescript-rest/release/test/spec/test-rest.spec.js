"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var express = require("express");
var request = require("request");
var fs = require("fs");
var _ = require("lodash");
var typescript_ioc_1 = require("typescript-ioc");
var typescript_rest_1 = require("../lib/typescript-rest");
typescript_rest_1.Server.useIoC();
var Person = (function () {
    function Person(id, name, age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }
    return Person;
}());
var InjectableObject = (function () {
    function InjectableObject() {
    }
    return InjectableObject;
}());
InjectableObject = __decorate([
    typescript_ioc_1.AutoWired
], InjectableObject);
var MyIoCService = (function () {
    function MyIoCService() {
    }
    MyIoCService.prototype.test = function () {
        return (this.injectedObject) ? "OK" : "NOT OK";
    };
    return MyIoCService;
}());
__decorate([
    typescript_ioc_1.Inject,
    __metadata("design:type", InjectableObject)
], MyIoCService.prototype, "injectedObject", void 0);
__decorate([
    typescript_rest_1.GET,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], MyIoCService.prototype, "test", null);
MyIoCService = __decorate([
    typescript_ioc_1.AutoWired,
    typescript_rest_1.Path("ioctest")
], MyIoCService);
var MyIoCService2 = (function () {
    function MyIoCService2() {
    }
    MyIoCService2.prototype.test = function () {
        return (this.injectedObject) ? "OK" : "NOT OK";
    };
    return MyIoCService2;
}());
__decorate([
    typescript_ioc_1.Inject,
    __metadata("design:type", InjectableObject)
], MyIoCService2.prototype, "injectedObject", void 0);
__decorate([
    typescript_rest_1.GET,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], MyIoCService2.prototype, "test", null);
MyIoCService2 = __decorate([
    typescript_rest_1.Path("ioctest2"),
    typescript_ioc_1.AutoWired
], MyIoCService2);
var MyService = (function () {
    function MyService() {
    }
    MyService.prototype.test = function () {
        return "OK";
    };
    MyService.prototype.test2 = function () {
        return "OK";
    };
    return MyService;
}());
__decorate([
    typescript_rest_1.GET,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], MyService.prototype, "test", null);
__decorate([
    typescript_rest_1.GET,
    typescript_rest_1.Path("secondpath"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], MyService.prototype, "test2", null);
MyService = __decorate([
    typescript_rest_1.Path("mypath")
], MyService);
var MyService2 = (function () {
    function MyService2() {
    }
    MyService2.prototype.test = function () {
        return "OK";
    };
    return MyService2;
}());
__decorate([
    typescript_rest_1.GET,
    typescript_rest_1.Path("secondpath"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], MyService2.prototype, "test", null);
MyService2 = __decorate([
    typescript_rest_1.Path("mypath2")
], MyService2);
var PersonService = (function () {
    function PersonService() {
    }
    PersonService.prototype.getPerson = function (id) {
        return new Promise(function (resolve, reject) {
            resolve(new Person(id, "Fulano de Tal número " + id.toString(), 35));
        });
    };
    PersonService.prototype.setPerson = function (person) {
        return true;
    };
    PersonService.prototype.addPerson = function (req, person) {
        return new typescript_rest_1.Return.NewResource(req.url + "/" + person.id);
    };
    PersonService.prototype.getAll = function (start, size) {
        var result = new Array();
        for (var i = start; i < (start + size); i++) {
            result.push(new Person(i, "Fulano de Tal número " + i.toString(), 35));
        }
        return result;
    };
    return PersonService;
}());
__decorate([
    typescript_rest_1.Path(":id"),
    typescript_rest_1.GET,
    __param(0, typescript_rest_1.PathParam('id')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number]),
    __metadata("design:returntype", Promise)
], PersonService.prototype, "getPerson", null);
__decorate([
    typescript_rest_1.PUT,
    typescript_rest_1.Path("/:id"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Person]),
    __metadata("design:returntype", Boolean)
], PersonService.prototype, "setPerson", null);
__decorate([
    typescript_rest_1.POST,
    __param(0, typescript_rest_1.ContextRequest),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Person]),
    __metadata("design:returntype", typescript_rest_1.Return.NewResource)
], PersonService.prototype, "addPerson", null);
__decorate([
    typescript_rest_1.GET,
    __param(0, typescript_rest_1.QueryParam('start')),
    __param(1, typescript_rest_1.QueryParam('size')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Number, Number]),
    __metadata("design:returntype", Array)
], PersonService.prototype, "getAll", null);
PersonService = __decorate([
    typescript_rest_1.Path("/asubpath/person")
], PersonService);
var TestParams = (function () {
    function TestParams() {
    }
    TestParams.prototype.testHeaders = function (header, cookie) {
        return "cookie: " + cookie + "|header: " + header;
    };
    TestParams.prototype.testMultiParam = function (param) {
        return param;
    };
    TestParams.prototype.testContext = function (q, request, response, next) {
        if (request && response && next) {
            response.status(201);
            if (q === "123") {
                response.send(true);
            }
            else {
                response.send(false);
            }
        }
    };
    TestParams.prototype.testUploadFile = function (file, myField) {
        return (file
            && (_.startsWith(file.buffer.toString(), '"use strict";'))
            && (myField === "my_value"));
    };
    return TestParams;
}());
__decorate([
    typescript_rest_1.Context,
    __metadata("design:type", typescript_rest_1.ServiceContext)
], TestParams.prototype, "context", void 0);
__decorate([
    typescript_rest_1.GET,
    typescript_rest_1.Path("headers"),
    __param(0, typescript_rest_1.HeaderParam('my-header')),
    __param(1, typescript_rest_1.CookieParam('my-cookie')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, String]),
    __metadata("design:returntype", String)
], TestParams.prototype, "testHeaders", null);
__decorate([
    typescript_rest_1.POST,
    typescript_rest_1.Path("multi-param"),
    __param(0, typescript_rest_1.Param('param')),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", String)
], TestParams.prototype, "testMultiParam", null);
__decorate([
    typescript_rest_1.GET,
    typescript_rest_1.Path("context"),
    __param(0, typescript_rest_1.QueryParam('q')),
    __param(1, typescript_rest_1.ContextRequest),
    __param(2, typescript_rest_1.ContextResponse),
    __param(3, typescript_rest_1.ContextNext),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String, Object, Object, Function]),
    __metadata("design:returntype", void 0)
], TestParams.prototype, "testContext", null);
__decorate([
    typescript_rest_1.POST,
    typescript_rest_1.Path("upload"),
    __param(0, typescript_rest_1.FileParam("myFile")),
    __param(1, typescript_rest_1.FormParam("myField")),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, String]),
    __metadata("design:returntype", Boolean)
], TestParams.prototype, "testUploadFile", null);
var TestDownload = (function () {
    function TestDownload() {
    }
    TestDownload.prototype.testDownloadFile = function () {
        return new Promise(function (resolve, reject) {
            fs.readFile(__dirname + '/test-rest.spec.js', function (err, data) {
                if (err) {
                    return reject(err);
                }
                return resolve(new typescript_rest_1.Return.DownloadBinaryData(data, 'application/javascript', 'test-rest.spec.js'));
            });
        });
    };
    return TestDownload;
}());
__decorate([
    typescript_rest_1.GET,
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], TestDownload.prototype, "testDownloadFile", null);
TestDownload = __decorate([
    typescript_rest_1.Path("download")
], TestDownload);
var AcceptTest = (function () {
    function AcceptTest() {
    }
    AcceptTest.prototype.testLanguage = function (language) {
        if (language === 'en') {
            return "accepted";
        }
        return "aceito";
    };
    AcceptTest.prototype.testAccepts = function (type) {
        if (type === 'application/json') {
            return "accepted";
        }
        return "not accepted";
    };
    AcceptTest.prototype.testConflict = function () {
        throw new typescript_rest_1.Errors.ConflictError("test of conflict");
    };
    AcceptTest.prototype.testConflictAsync = function () {
        return new Promise(function (resolve, reject) {
            throw new typescript_rest_1.Errors.ConflictError("test of conflict");
        });
    };
    return AcceptTest;
}());
__decorate([
    typescript_rest_1.GET,
    __param(0, typescript_rest_1.ContextLanguage),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", String)
], AcceptTest.prototype, "testLanguage", null);
__decorate([
    typescript_rest_1.GET,
    typescript_rest_1.Path("types"),
    typescript_rest_1.Accept("application/json"),
    __param(0, typescript_rest_1.ContextAccept),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [String]),
    __metadata("design:returntype", String)
], AcceptTest.prototype, "testAccepts", null);
__decorate([
    typescript_rest_1.PUT,
    typescript_rest_1.Path("conflict"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", String)
], AcceptTest.prototype, "testConflict", null);
__decorate([
    typescript_rest_1.POST,
    typescript_rest_1.Path("conflict"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], AcceptTest.prototype, "testConflictAsync", null);
AcceptTest = __decorate([
    typescript_rest_1.Path("/accept"),
    typescript_rest_1.AcceptLanguage("en", "pt-BR")
], AcceptTest);
var app = express();
app.set('env', 'test');
typescript_rest_1.Server.buildServices(app);
var server;
describe("Server Tests", function () {
    beforeAll(function () {
        server = app.listen(5674);
    });
    afterAll(function () {
        server.close();
    });
    describe("Server", function () {
        it("should provide a catalog containing the exposed paths", function () {
            expect(typescript_rest_1.Server.getPaths().indexOf("/mypath")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/ioctest")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/ioctest2")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/mypath2/secondpath")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/asubpath/person/:id")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/headers")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/multi-param")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/context")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/upload")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/download")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getHttpMethods("/asubpath/person/:id").indexOf(typescript_rest_1.HttpMethod.GET)).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getHttpMethods("/asubpath/person/:id").indexOf(typescript_rest_1.HttpMethod.PUT)).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/accept")).toBeGreaterThan(-1);
            expect(typescript_rest_1.Server.getPaths().indexOf("/accept/conflict")).toBeGreaterThan(-1);
        });
    });
    describe("PersonService", function () {
        it("should return the person (123) for GET on path: /asubpath/person/123", function (done) {
            request("http://localhost:5674/asubpath/person/123", function (error, response, body) {
                var result = JSON.parse(body);
                expect(result.id).toEqual(123);
                done();
            });
        });
        it("should return true for PUT on path: /asubpath/person/123", function (done) {
            request.put({
                headers: { 'content-type': 'application/json' },
                url: "http://localhost:5674/asubpath/person/123",
                body: JSON.stringify(new Person(123, "Fulano de Tal número 123", 35))
            }, function (error, response, body) {
                expect(body).toEqual("true");
                done();
            });
        });
        it("should return 201 for POST on path: /asubpath/person", function (done) {
            request.post({
                headers: { 'content-type': 'application/json' },
                url: "http://localhost:5674/asubpath/person",
                body: JSON.stringify(new Person(123, "Fulano de Tal número 123", 35))
            }, function (error, response, body) {
                expect(response.statusCode).toEqual(201);
                expect(response.headers['location']).toEqual("/asubpath/person/123");
                done();
            });
        });
        it("should return an array with 3 elements for GET on path: /asubpath/person?start=0&size=3", function (done) {
            request("http://localhost:5674/asubpath/person?start=0&size=3", function (error, response, body) {
                var result = JSON.parse(body);
                expect(result.length).toEqual(3);
                done();
            });
        });
    });
    describe("MyService", function () {
        it("should configure a path without an initial /", function (done) {
            request("http://localhost:5674/mypath", function (error, response, body) {
                expect(body).toEqual("OK");
                done();
            });
        });
    });
    describe("MyIoCService", function () {
        it("should use IoC container to instantiate the services", function (done) {
            request("http://localhost:5674/ioctest", function (error, response, body) {
                expect(body).toEqual("OK");
                done();
            });
        });
        it("should use IoC container to instantiate the services, does not carrying about the decorators order", function (done) {
            request("http://localhost:5674/ioctest2", function (error, response, body) {
                expect(body).toEqual("OK");
                done();
            });
        });
    });
    describe("MyService2", function () {
        it("should configure a path on method ", function (done) {
            request("http://localhost:5674/mypath2/secondpath", function (error, response, body) {
                expect(body).toEqual("OK");
                done();
            });
        });
    });
    describe("TestParams", function () {
        it("should parse header and cookies correclty", function (done) {
            request({
                headers: { 'my-header': 'header value', 'Cookie': 'my-cookie=cookie value' },
                url: "http://localhost:5674/headers"
            }, function (error, response, body) {
                expect(body).toEqual("cookie: cookie value|header: header value");
                done();
            });
        });
        it("should parse multi param as query param", function (done) {
            request.post({
                url: "http://localhost:5674/multi-param?param=myQueryValue"
            }, function (error, response, body) {
                expect(body).toEqual("myQueryValue");
                done();
            });
        });
        it("should parse multi param as form param", function (done) {
            var form = {
                'param': 'formParam'
            };
            var req = request.post({
                "url": "http://localhost:5674/multi-param",
                "form": form
            }, function (error, response, body) {
                expect(body).toEqual("formParam");
                expect(response.statusCode).toEqual(200);
                done();
            });
        });
        it("should accept Context parameters", function (done) {
            request({
                url: "http://localhost:5674/context?q=123"
            }, function (error, response, body) {
                expect(body).toEqual("true");
                expect(response.statusCode).toEqual(201);
                done();
            });
        });
        it("should accept file parameters", function (done) {
            var req = request.post("http://localhost:5674/upload", function (error, response, body) {
                expect(body).toEqual("true");
                expect(response.statusCode).toEqual(200);
                done();
            });
            var form = req.form();
            form.append('myField', 'my_value');
            form.append('myFile', fs.createReadStream(__dirname + '/test-rest.spec.js'), 'test-rest.spec.js');
        });
    });
    describe("TestDownload", function () {
        it("should return a file", function (done) {
            request({
                url: "http://localhost:5674/download"
            }, function (error, response, body) {
                expect(response.headers['content-type']).toEqual('application/javascript');
                expect(_.startsWith(body.toString(), '"use strict";')).toEqual(true);
                done();
            });
        });
    });
    describe("AcceptTest", function () {
        it("should choose language correctly", function (done) {
            request({
                headers: { 'Accept-Language': 'pt-BR' },
                url: "http://localhost:5674/accept"
            }, function (error, response, body) {
                expect(body).toEqual("aceito");
                done();
            });
        });
        it("should reject unacceptable languages", function (done) {
            request({
                headers: { 'Accept-Language': 'fr' },
                url: "http://localhost:5674/accept"
            }, function (error, response, body) {
                expect(response.statusCode).toEqual(406);
                done();
            });
        });
        it("should use default language if none specified", function (done) {
            request({
                url: "http://localhost:5674/accept"
            }, function (error, response, body) {
                expect(body).toEqual("accepted");
                done();
            });
        });
        it("should use default media type if none specified", function (done) {
            request({
                url: "http://localhost:5674/accept/types"
            }, function (error, response, body) {
                expect(body).toEqual("accepted");
                done();
            });
        });
        it("should handle RestErrors", function (done) {
            request.put({
                headers: { 'Accept': 'text/html' },
                url: "http://localhost:5674/accept/conflict",
            }, function (error, response, body) {
                expect(response.statusCode).toEqual(409);
                done();
            });
        });
        it("should handle RestErrors on Async calls", function (done) {
            request.post({
                headers: { 'Accept': 'text/html' },
                url: "http://localhost:5674/accept/conflict",
            }, function (error, response, body) {
                expect(response.statusCode).toEqual(409);
                done();
            });
        });
        it("should reject unacceptable media types", function (done) {
            request({
                headers: { 'Accept': 'text/html' },
                url: "http://localhost:5674/accept/types"
            }, function (error, response, body) {
                expect(response.statusCode).toEqual(406);
                done();
            });
        });
    });
    describe("Server", function () {
        it("should return 404 when unmapped resources are requested", function (done) {
            request({
                url: "http://localhost:5674/unmapped/resource"
            }, function (error, response, body) {
                expect(response.statusCode).toEqual(404);
                done();
            });
        });
        it("should return 405 when a not supported method is requeted to a mapped resource", function (done) {
            request.post({
                url: "http://localhost:5674/asubpath/person/123"
            }, function (error, response, body) {
                expect(response.statusCode).toEqual(405);
                var allowed = response.headers['allow'];
                expect(allowed).toContain("GET");
                expect(allowed).toContain("PUT");
                done();
            });
        });
    });
});

//# sourceMappingURL=test-rest.spec.js.map
