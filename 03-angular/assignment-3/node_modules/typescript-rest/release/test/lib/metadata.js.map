{"version":3,"sources":["../../src/lib/metadata.ts"],"names":["ServiceClass","targetClass","methods","Map","prototype","addProperty","key","paramType","hasProperties","properties","set","size","exports","ServiceMethod","parameters","Array","mustParseCookies","files","mustParseBody","mustParseForms","acceptMultiTypedParam","FileParam","name","singleFile","MethodParam","type","ParamType"],"mappings":"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","file":"metadata.js","sourcesContent":["/// <reference path=\"./collections.d.ts\" />\n\"use strict\";\n\nimport {HttpMethod} from \"./server-types\"\n\n/**\n * Metadata for REST service classes\n */\nexport class ServiceClass {\n\tconstructor(targetClass: Function) {\n\t\tthis.targetClass = targetClass;\n\t\tthis.methods = new Map<string,ServiceMethod>();\n\t}\n\n\ttargetClass: Function;\n\tpath: string;\n\tmethods: Map<string,ServiceMethod>;\n\tlanguages: Array<string>;\n\taccepts: Array<string>;\n\tproperties: Map<string,ParamType>;\n\t\n\taddProperty(key: string, paramType: ParamType) {\n\t\tif (!this.hasProperties()) {\n\t\t\tthis.properties = new Map<string,ParamType>();\n\t\t}\n\t\tthis.properties.set(key, paramType);\n\t}\n\n\thasProperties(): boolean {\n\t\treturn (this.properties && this.properties.size > 0);\n\t}\n}\n\n/**\n * Metadata for REST service methods\n */\nexport class ServiceMethod {\n\tname: string;\n\tpath: string;\n\tresolvedPath: string;\n\thttpMethod: HttpMethod;\n\tparameters: Array<MethodParam> = new Array<MethodParam>();\n\tmustParseCookies: boolean = false;\n\tfiles: Array<FileParam> = new Array<FileParam>();\n\tmustParseBody: boolean = false;\n\tmustParseForms: boolean = false;\n\tacceptMultiTypedParam: boolean = false;\n\tlanguages: Array<string>;\n\taccepts: Array<string>;\n\tresolvedLanguages: Array<string>;\n\tresolvedAccepts: Array<string>;\n}\n\n/**\n * Metadata for File parameters on REST methods\n */\nexport class FileParam {\n\tconstructor(name: string, singleFile: boolean) {\n\t\tthis.name = name;\n\t\tthis.singleFile = singleFile;\n\t}\n\n\tname: string;\n\tsingleFile: boolean;\n}\n\n/**\n * Metadata for REST service method parameters\n */\nexport class MethodParam {\n\tconstructor(name: string, type: Function, paramType: ParamType) {\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.paramType = paramType;\n\t}\n\n\tname: string;\n\ttype: Function;\n\tparamType: ParamType;\n}\n\n/**\n * Enumeration of accepted parameter types\n */\nexport enum ParamType {\n\tpath,\n\tquery,\n\theader,\n\tcookie,\n\tform,\n\tbody,\n\tparam,\n\tfile, \n\tfiles, \n\tcontext,\n\tcontext_request,\n\tcontext_response,\n\tcontext_next, \n\tcontext_accept,\n\tcontext_accept_language\n}\n"]}