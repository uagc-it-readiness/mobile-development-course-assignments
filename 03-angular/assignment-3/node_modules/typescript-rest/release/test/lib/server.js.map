{"version":3,"sources":["../../src/lib/server.ts","server.js"],"names":["require","server_container_1","Server","buildServices","router","types","_i","arguments","length","iternalServer","InternalServer","getPaths","result","Array","forEach","value","push","registerServiceFactory","serviceFactory","useIoC","ioc","create","serviceClass","Container","get","getTargetClass","typeConstructor","TypeError","getHttpMethods","path","setCookiesSecret","secret","cookiesSecret","setCookiesDecoder","decoder","cookiesDecoder","setFileDest","dest","fileDest","setFileFilter","filter","fileFilter","setFileLimits","limit","fileLimits","exports"],"mappings":"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","file":"server.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport \"multer\"; \nimport {InternalServer} from \"./server-container\"; \nimport {HttpMethod, ServiceFactory} from \"./server-types\"; \n\n/**\n * The Http server main class. \n */\nexport class Server {\n\t/**\n\t * Create the routes for all classes decorated with our decorators\n\t */\n\tstatic buildServices(router: express.Router, ...types) {\n\t\tlet iternalServer: InternalServer = new InternalServer(router);\n\t\titernalServer.buildServices(types);\n\t}\n\n\t/**\n\t * Return all paths accepted by the Server\n\t */\n\tstatic getPaths(): Array<string> {\n\t\tlet result = new Array<string>();\n\t\tInternalServer.getPaths().forEach(value=>{\n\t\t\tresult.push(value);\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Register a custom serviceFactory. It will be used to instantiate the service Objects\n\t * If You plan to use a custom serviceFactory, You must ensure to call this method before any typescript-rest service declaration.\n\t */\n\tstatic registerServiceFactory(serviceFactory: ServiceFactory) {\n\t\tInternalServer.serviceFactory = serviceFactory;\t\n\t}\n\n\t/**\n\t * Configure the Server to use [typescript-ioc](https://github.com/thiagobustamante/typescript-ioc)\n\t * to instantiate the service objects.\n\t * If You plan to use IoC, You must ensure to call this method before any typescript-rest service declaration.\n\t */\n\tstatic useIoC() {\n\t\tlet ioc = require(\"typescript-ioc\");\n\t\tServer.registerServiceFactory({\n\t\t\tcreate: (serviceClass) => {\n\t\t\t\treturn ioc.Container.get(serviceClass);\n\t\t\t},\n\t\t\tgetTargetClass: (serviceClass: Function) => {\n\t\t\t\tlet typeConstructor: Function = serviceClass;\n\t\t\t\tif (typeConstructor['name']) {\n\t\t\t\t\treturn <FunctionConstructor>typeConstructor;\n\t\t\t\t}\n\t\t\t\twhile (typeConstructor = typeConstructor['__parent']) {\n\t\t\t\t\tif (typeConstructor['name']) {\n\t\t\t\t\t\treturn <FunctionConstructor>typeConstructor;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow TypeError('Can not identify the base Type for requested target');\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Return the set oh HTTP verbs configured for the given path\n\t * @param path The path to search HTTP verbs\n\t */\n\tstatic getHttpMethods(path: string): Array<HttpMethod> {\n\t\tlet result = new Array<HttpMethod>();\n\t\tInternalServer.getHttpMethods(path).forEach(value=>{\n\t\t\tresult.push(value);\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * A string used for signing cookies. This is optional and if not specified, \n\t * will not parse signed cookies.\n\t * @param secret the secret used to sign\n\t */\n\tstatic setCookiesSecret(secret: string) {\n\t\tInternalServer.cookiesSecret = secret;\n\t}\n\n\t/**\n\t * Specifies a function that will be used to decode a cookie's value. \n\t * This function can be used to decode a previously-encoded cookie value \n\t * into a JavaScript string.\n\t * The default function is the global decodeURIComponent, which will decode \n\t * any URL-encoded sequences into their byte representations.\n\t * \n\t * NOTE: if an error is thrown from this function, the original, non-decoded \n\t * cookie value will be returned as the cookie's value.\n\t * @param decoder The decoder function\n\t */\n\tstatic setCookiesDecoder(decoder: (val: string) => string) {\n\t\tInternalServer.cookiesDecoder = decoder;\n\t}\n\n\t/**\n\t * Set where to store the uploaded files\n\t * @param dest Destination folder\n\t */\n\tstatic setFileDest(dest: string) {\n\t\tInternalServer.fileDest = dest;\n\t}\n\n\t/**\n\t * Set a Function to control which files are accepted to upload\n\t * @param filter The filter function\n\t */\n\tstatic setFileFilter(filter: (req: Express.Request, file: Express.Multer.File, \n\t\t\t\t\tcallback: (error: Error, acceptFile: boolean) => void) => void) {\n\t\tInternalServer.fileFilter = filter;\n\t}\n\n\t/**\n\t * Set the limits of uploaded data\n\t * @param limit The data limit\n\t */\n\tstatic setFileLimits(limit: number) {\n\t\tInternalServer.fileLimits = limit;\n\t}\n}\n","\"use strict\";\nrequire(\"multer\");\nvar server_container_1 = require(\"./server-container\");\nvar Server = (function () {\n    function Server() {\n    }\n    Server.buildServices = function (router) {\n        var types = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            types[_i - 1] = arguments[_i];\n        }\n        var iternalServer = new server_container_1.InternalServer(router);\n        iternalServer.buildServices(types);\n    };\n    Server.getPaths = function () {\n        var result = new Array();\n        server_container_1.InternalServer.getPaths().forEach(function (value) {\n            result.push(value);\n        });\n        return result;\n    };\n    Server.registerServiceFactory = function (serviceFactory) {\n        server_container_1.InternalServer.serviceFactory = serviceFactory;\n    };\n    Server.useIoC = function () {\n        var ioc = require(\"typescript-ioc\");\n        Server.registerServiceFactory({\n            create: function (serviceClass) {\n                return ioc.Container.get(serviceClass);\n            },\n            getTargetClass: function (serviceClass) {\n                var typeConstructor = serviceClass;\n                if (typeConstructor['name']) {\n                    return typeConstructor;\n                }\n                while (typeConstructor = typeConstructor['__parent']) {\n                    if (typeConstructor['name']) {\n                        return typeConstructor;\n                    }\n                }\n                throw TypeError('Can not identify the base Type for requested target');\n            }\n        });\n    };\n    Server.getHttpMethods = function (path) {\n        var result = new Array();\n        server_container_1.InternalServer.getHttpMethods(path).forEach(function (value) {\n            result.push(value);\n        });\n        return result;\n    };\n    Server.setCookiesSecret = function (secret) {\n        server_container_1.InternalServer.cookiesSecret = secret;\n    };\n    Server.setCookiesDecoder = function (decoder) {\n        server_container_1.InternalServer.cookiesDecoder = decoder;\n    };\n    Server.setFileDest = function (dest) {\n        server_container_1.InternalServer.fileDest = dest;\n    };\n    Server.setFileFilter = function (filter) {\n        server_container_1.InternalServer.fileFilter = filter;\n    };\n    Server.setFileLimits = function (limit) {\n        server_container_1.InternalServer.fileLimits = limit;\n    };\n    return Server;\n}());\nexports.Server = Server;\n"]}