{"version":3,"sources":["../../src/lib/server-container.ts"],"names":["bodyParser","require","cookieParser","multer","metadata","Errors","_","server_types_1","server_return_1","InternalServer","router","registerServiceClass","target","pathsResolved","serviceFactory","getTargetClass","name","constructor","serverClasses","has","set","ServiceClass","serviceClass","get","registerServiceMethod","methodName","classData","methods","ServiceMethod","serviceMethod","prototype","buildServices","types","_this","map","type","forEach","method","validateTargetType","targetClass","buildService","handleNotAllowedMethods","handler","req","res","next","callTargetEndPoint","resolvedPath","resolveProperties","middleware","buildServiceMiddleware","args","concat","push","httpMethod","HttpMethod","GET","apply","POST","post","PUT","put","DELETE","delete","HEAD","head","OPTIONS","options","PATCH","patch","Error","length","indexOf","paths","getPaths","path","supported","getHttpMethods","allowedMethods","Array","allowed","join","all","MethodNotAllowedError","getUploader","upload","fileDest","dest","fileFilter","fileLimits","limits","result","mustParseCookies","cookiesSecret","cookiesDecoder","decode","mustParseBody","json","mustParseForms","acceptMultiTypedParam","urlencoded","extended","files","options_1","fileData","singleFile","fields","processResponseHeaders","context","resolvedLanguages","response","vary","language","resolvedAccepts","checkAcceptance","lang","request","acceptsLanguages","languages","accept","accepts","NotAcceptableError","createService","serviceObject","create","hasProperties","properties","paramType","key","ParamType","context_accept_language","context_accept","context_request","context_response","context_next","ServiceContext","buildArgumentsList","toCall","sendValue","value","send","toString","headersSent","sendStatus","filePath","DownloadResource","download","fileName","DownloadBinaryData","writeHead","mimeType","content","end","location","ReferencedResource","statusCode","then","self_1","val","catch","err","parameters","param","convertType","params","query","header","cookie","cookies","body","file","form","paramValue","serializedType","parseFloat","resolveAllPaths","clear","Set","add","resolveLanguages","resolveAccepts","resolvePath","classPath","trim","startsWith","endsWith","slice","methodPath","declaredHttpMethods","Map","Object","exports"],"mappings":"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","file":"server-container.js","sourcesContent":["/// <reference path=\"./collections.d.ts\" />\n\"use strict\";\n\nimport * as express from \"express\"; \nimport * as bodyParser from \"body-parser\"; \nimport * as cookieParser from \"cookie-parser\";\nimport * as multer from \"multer\";\nimport * as metadata from \"./metadata\";\nimport * as Errors from \"./server-errors\";\nimport * as _ from \"lodash\";\n\nimport {HttpMethod, ServiceContext, ReferencedResource, ServiceFactory} from \"./server-types\";\nimport {DownloadResource, DownloadBinaryData} from \"./server-return\";\n\nexport class InternalServer {\n\tstatic serverClasses: Map<string,metadata.ServiceClass> = new Map<string,metadata.ServiceClass>();\n\tstatic paths: Map<string,Set<HttpMethod>> = new Map<string,Set<HttpMethod>>();\n\tstatic pathsResolved: boolean = false;\n\tstatic cookiesSecret: string;\n\tstatic cookiesDecoder: (val: string) => string;\n\tstatic fileDest: string;\n\tstatic fileFilter: (req: Express.Request, file: Express.Multer.File, callback: (error: Error, acceptFile: boolean) => void) => void;\n\tstatic fileLimits: number;\n\tstatic serviceFactory: ServiceFactory = {\n\t\tcreate: (serviceClass: Function) => {\n\t\t\tlet serviceObject = Object.create(serviceClass.prototype);\n\t\t\tserviceClass.apply(serviceObject);\n\t\t\treturn serviceObject;\n\t\t},\n\t\tgetTargetClass: (serviceClass: Function) => {\n\t\t\treturn <FunctionConstructor>serviceClass;\n\t\t}\n\t}\n\n\trouter: express.Router;\n\tupload: multer.Instance; \n\n\tconstructor(router: express.Router) {\n\t\tthis.router = router;\n\t }\n\n\tstatic registerServiceClass(target: Function): metadata.ServiceClass {\n\t\tInternalServer.pathsResolved = false;\n\t\ttarget = InternalServer.serviceFactory.getTargetClass(target);\n\t\tlet name: string = target['name'] || target.constructor['name'];\n\t\tif (!InternalServer.serverClasses.has(name)) {\n\t\t\tInternalServer.serverClasses.set(name, new metadata.ServiceClass(target));\n\t\t}\n\t\tlet serviceClass: metadata.ServiceClass = InternalServer.serverClasses.get(name);\n\t\treturn serviceClass;\n\t}\n\n\tstatic registerServiceMethod(target: Function, methodName: string): metadata.ServiceMethod {\n\t\tif (methodName) {\n\t\t\tInternalServer.pathsResolved = false;\n\t\t\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target);\n\t\t\tif (!classData.methods.has(methodName)) {\n\t\t\t\tclassData.methods.set(methodName, new metadata.ServiceMethod());\n\t\t\t}\n\t\t\tlet serviceMethod: metadata.ServiceMethod = classData.methods.get(methodName);\n\t\t\treturn serviceMethod;\n\t\t}\n\t\treturn null;\n\t}\n\n\tbuildServices(types?: Array<Function>) {\n\t\tif (types) {\n\t\t\ttypes = types.map(type => InternalServer.serviceFactory.getTargetClass(type));\n\t\t}\n\t\tInternalServer.serverClasses.forEach(classData => { \n\t\t\tclassData.methods.forEach(method => {\n\t\t\t\tif (this.validateTargetType(classData.targetClass, types)) {\n\t\t\t\t\tthis.buildService(classData, method);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tInternalServer.pathsResolved = true;\n\t\tthis.handleNotAllowedMethods();\n\t}\n\n\tbuildService(serviceClass: metadata.ServiceClass, serviceMethod: metadata.ServiceMethod) {\n\t\tlet handler = (req, res, next) => {\n\t\t\tthis.callTargetEndPoint(serviceClass, serviceMethod, req, res, next);\n\t\t};\n\n\t\tif (!serviceMethod.resolvedPath) {\n\t\t\tInternalServer.resolveProperties(serviceClass, serviceMethod);\n\t\t}\n\n\t\tlet middleware: Array<express.RequestHandler> = this.buildServiceMiddleware(serviceMethod);\n\t\tlet args: any[] = [serviceMethod.resolvedPath];\n\t\targs = args.concat(middleware);\n\t\targs.push(handler);\n\t\tswitch (serviceMethod.httpMethod) {\n\t\t \tcase HttpMethod.GET:\n\t\t\t\tthis.router.get.apply(this.router, args);\n\t\t \tbreak;\n\t\t\tcase HttpMethod.POST:\n\t\t\t\tthis.router.post.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.PUT:\n\t\t\t\tthis.router.put.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.DELETE:\n\t\t\t\tthis.router.delete.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.HEAD:\n\t\t\t\tthis.router.head.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.OPTIONS:\n\t\t\t\tthis.router.options.apply(this.router, args);\n\t\t\tbreak;\n\t\t\tcase HttpMethod.PATCH:\n\t\t\t\tthis.router.patch.apply(this.router, args);\n\t\t\tbreak;\n\n\t\t \tdefault:\n\t\t\t\tthrow Error(\"Invalid http method for service [\" + serviceMethod.resolvedPath + \"]\");\n\t\t }\n\t}\n\n\tprivate validateTargetType(targetClass: Function, types: Array<Function>): boolean {\n\t\tif (types && types.length > 0){\n\t\t\treturn (types.indexOf(targetClass) > -1);\n\t\t}\n\t\treturn true\n\t}\n\n\tprivate handleNotAllowedMethods() {\n\t\tlet paths: Set<string> = InternalServer.getPaths();\n\t\tpaths.forEach((path)=>{\n\t\t\tlet supported : Set<HttpMethod> = InternalServer.getHttpMethods(path);\n\t\t\tlet allowedMethods: Array<string> = new Array<string>();\n\t\t\tsupported.forEach((method: HttpMethod) => {\n\t\t\t\tallowedMethods.push(HttpMethod[method]);\n\t\t\t});\n\t\t\tlet allowed: string = allowedMethods.join(', '); \n\t\t\tthis.router.all(path, (req: express.Request, res: express.Response, next: express.NextFunction) => {\n\t\t\t\tres.set('Allow', allowed);\n\t\t\t\tthrow new Errors.MethodNotAllowedError();\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate getUploader(): multer.Instance {\n\t\tif (!this.upload) {\n\t\t\tlet options : multer.Options= {};\n\t\t\tif (InternalServer.fileDest) {\n\t\t\t\toptions.dest = InternalServer.fileDest;\n\t\t\t}\n\t\t\tif (InternalServer.fileFilter) {\n\t\t\t\toptions.fileFilter = InternalServer.fileFilter;\n\t\t\t}\n\t\t\tif (InternalServer.fileLimits) {\n\t\t\t\toptions.limits = InternalServer.fileLimits;\n\t\t\t}\n\t\t\tif (options.dest) {\n\t\t\t\tthis.upload = multer(options);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.upload = multer();\n\t\t\t}\n\t\t}\n\t\treturn this.upload;\n\t} \n\n\tprivate buildServiceMiddleware(serviceMethod: metadata.ServiceMethod): Array<express.RequestHandler> {\n\t\tlet result: Array<express.RequestHandler> = new Array<express.RequestHandler>();\n\n\t\tif (serviceMethod.mustParseCookies) {\n\t\t\tlet args = [];\n\t\t\tif (InternalServer.cookiesSecret) {\n\t\t\t\targs.push(InternalServer.cookiesSecret);\n\t\t\t}\n\t\t\tif (InternalServer.cookiesDecoder){\n\t\t\t\targs.push({ decode: InternalServer.cookiesDecoder });\n\t\t\t}\n\t\t\tresult.push(cookieParser.apply(this, args));\n\t\t}\n\t\tif (serviceMethod.mustParseBody) {\n\t\t\tresult.push(bodyParser.json());\n\t\t\t//TODO adicionar parser de XML para o body\n\t\t}\n\t\tif (serviceMethod.mustParseForms || serviceMethod.acceptMultiTypedParam) {\n\t\t\tresult.push(bodyParser.urlencoded({ extended: true }));\n\t\t}\n\t\tif (serviceMethod.files.length > 0) {\n\t\t\tlet options: Array<multer.Field> = new Array<multer.Field>();\n\t\t\tserviceMethod.files.forEach(fileData => {\n\t\t\t\tif (fileData.singleFile) {\n\t\t\t\t\toptions.push({\"name\": fileData.name,  \"maxCount\": 1});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\toptions.push({\"name\": fileData.name});\n\t\t\t\t}\n\t\t\t});\n\t\t\tresult.push(this.getUploader().fields(options));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate processResponseHeaders(serviceMethod: metadata.ServiceMethod, context: ServiceContext) {\n\t\tif (serviceMethod.resolvedLanguages) {\n\t\t\tif (serviceMethod.httpMethod === HttpMethod.GET) {\n\t\t\t\tcontext.response.vary(\"Accept-Language\");\n\t\t\t}\n\t\t\tcontext.response.set(\"Content-Language\", context.language);\n\t\t}\n\t\tif (serviceMethod.resolvedAccepts) {\n\t\t\tcontext.response.vary(\"Accept\");\n\t\t}\n\t}\n\n\tprivate checkAcceptance(serviceMethod: metadata.ServiceMethod, context: ServiceContext): void{\n\t\tif (serviceMethod.resolvedLanguages) {\n\t\t\t let lang: any = context.request.acceptsLanguages(serviceMethod.resolvedLanguages);\n\t\t\t if (lang) {\n\t\t\t\t context.language = <string> lang;\n\t\t\t }\n\t\t}\n\t\telse {\n\t\t\t let languages: string[] = context.request.acceptsLanguages();\n\t\t\t if (languages && languages.length > 0) {\n\t\t\t\t context.language = languages[0];\n\t\t\t }\n\t\t}\n\n\t\tif (serviceMethod.resolvedAccepts) {\n\t\t\t let accept: any = context.request.accepts(serviceMethod.resolvedAccepts);\n\t\t\t if (accept) {\n\t\t\t\t context.accept = <string> accept;\n\t\t\t }\n\t\t\t else {\n\t\t\t \tthrow new Errors.NotAcceptableError(\"Accept\");\n\t\t\t }\n\t\t}\n\n\t\tif (!context.language) {\n\t\t \tthrow new Errors.NotAcceptableError(\"Accept-Language\");\n\t\t}\n\t}\n\n\tprivate createService(serviceClass: metadata.ServiceClass, context: ServiceContext) {\n\t\tlet serviceObject = InternalServer.serviceFactory.create(serviceClass.targetClass);\n\t\tif (serviceClass.hasProperties()) {\n\t\t\tserviceClass.properties.forEach((paramType, key) => {\n\t\t\t\tswitch (paramType) {\n\t\t\t\t\tcase metadata.ParamType.context:\n\t\t\t\t\t\tserviceObject[key] = context;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase metadata.ParamType.context_accept_language:\n\t\t\t\t\t\tserviceObject[key] = context.language;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase metadata.ParamType.context_accept:\n\t\t\t\t\t\tserviceObject[key] = context.accept;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase metadata.ParamType.context_request:\n\t\t\t\t\t\tserviceObject[key] = context.request;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase metadata.ParamType.context_response:\n\t\t\t\t\t\tserviceObject[key] = context.response;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase metadata.ParamType.context_next:\n\t\t\t\t\t\tserviceObject[key] = context.next;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\treturn serviceObject;\n\t}\n\n\tprivate callTargetEndPoint(serviceClass: metadata.ServiceClass, serviceMethod: metadata.ServiceMethod, \n\t\treq: express.Request, res: express.Response, next: express.NextFunction) {\n\t\tlet context: ServiceContext = new ServiceContext();\n\t\tcontext.request = req;\n\t\tcontext.response = res;\n\t\tcontext.next = next;\n\n\t\tthis.checkAcceptance(serviceMethod, context);\n\t\tlet serviceObject = this.createService(serviceClass, context);\n\t\tlet args = this.buildArgumentsList(serviceMethod, context);\n\t\tlet toCall = serviceClass.targetClass.prototype[serviceMethod.name] || serviceClass.targetClass[serviceMethod.name];\n\t\tlet result = toCall.apply(serviceObject, args);\n\t\tthis.processResponseHeaders(serviceMethod, context);\n\t\tthis.sendValue(result, res, next);\n\t}\n\n\tprivate sendValue(value: any, res: express.Response, next: express.NextFunction) {\n\t\tswitch (typeof value) {\n\t\t\tcase \"number\":\n\t\t\t\tres.send(value.toString());\n\t\t\t\tbreak;\n\t\t\tcase \"string\":\n\t\t\t\tres.send(value);\n\t\t\t\tbreak;\n\t\t\tcase \"boolean\":\n\t\t\t\tres.send(value.toString());\n\t\t\t\tbreak;\n\t\t\tcase \"undefined\":\n\t\t\t\tif (!res.headersSent) {\n\t\t\t\t\tres.sendStatus(204);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (value.filePath && value instanceof DownloadResource) {\n\t\t\t\t\tres.download(value.filePath, value.fileName);\n\t\t\t\t}\n\t\t\t\telse if (value instanceof DownloadBinaryData) {\n\t\t\t\t\tres.writeHead(200, {\n\t\t\t\t\t\t'Content-Type': value.mimeType,\n\t\t\t\t\t\t'Content-disposition': 'attachment;filename=' + value.fileName,\n\t\t\t\t\t\t'Content-Length': value.content.length\n\t\t\t\t\t});\n\t\t\t\t\tres.end(value.content);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse if (value.location && value instanceof ReferencedResource) {\n\t\t\t\t\tres.set(\"Location\", value.location);\n\t\t\t\t\tres.sendStatus(value.statusCode);\n\t\t\t\t}\n\t\t\t\telse if (value.then && value.constructor['name'] === 'Promise') {\n\t\t\t\t\tlet self = this;\n\t\t\t\t\tvalue.then(function(val) {\n\t\t\t\t\t\tself.sendValue(val, res, next);\n\t\t\t\t\t}).catch(function(err) {\n\t\t\t\t\t\tnext(err);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tres.json(value);\n\t\t\t\t}\n\t\t}\n\t}\n\n\tprivate buildArgumentsList(serviceMethod: metadata.ServiceMethod, context: ServiceContext) {\n\t\tlet result: Array<any> = new Array<any>();\n\n\t\tserviceMethod.parameters.forEach(param => {\n\t\t\tswitch (param.paramType) {\n\t\t\t\tcase metadata.ParamType.path:\n\t\t\t\t\tresult.push(this.convertType(context.request.params[param.name], param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.query:\n\t\t\t\t\tresult.push(this.convertType(context.request.query[param.name], param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.header:\n\t\t\t\t\tresult.push(this.convertType(context.request.header(param.name), param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.cookie:\n\t\t\t\t\tresult.push(this.convertType(context.request.cookies[param.name], param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.body:\n\t\t\t\t\tresult.push(this.convertType(context.request.body, param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.file:\n\t\t\t\t\tlet files : Array<Express.Multer.File> = context.request.files[param.name];\n\t\t\t\t\tif (files && files.length > 0) {\n\t\t\t\t\t\tresult.push(files[0]);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.files:\n\t\t\t\t\tresult.push(context.request.files[param.name]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.form:\n\t\t\t\t\tresult.push(this.convertType(context.request.body[param.name], param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.param:\n\t\t\t\t\tlet paramValue = context.request.body[param.name] ||\n\t\t\t\t\t\t\t\t\t context.request.query[param.name]; \n\t\t\t\t\tresult.push(this.convertType(paramValue, param.type));\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.context:\n\t\t\t\t\tresult.push(context);\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.context_request:\n\t\t\t\t\tresult.push(context.request);\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.context_response:\n\t\t\t\t\tresult.push(context.response);\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.context_next:\n\t\t\t\t\tresult.push(context.next);\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.context_accept:\n\t\t\t\t\tresult.push(context.accept);\n\t\t\t\t\tbreak;\n\t\t\t\tcase metadata.ParamType.context_accept_language:\n\t\t\t\t\tresult.push(context.language);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow Error(\"Invalid parameter type\");\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\tprivate convertType(paramValue: string, paramType: Function): any {\n\t\tlet serializedType = paramType['name'];\n\t\tswitch (serializedType) {\n\t\t\tcase \"Number\":\n\t\t\t\treturn paramValue ? parseFloat(paramValue) : 0;\n\t\t\tcase \"Boolean\":\n\t\t\t\treturn paramValue === 'true';\n\t\t\tdefault:\n\t\t\t\treturn paramValue;\n\t\t}\n\t}\n\n//TODO: \n// Parametros do tipo DTO (@BeanParam). \n// criar tipo de retorno para donwload???\n// controlar cache\n// conditional requests\n// Adicionar anotações para Coleções de recursos e para operações \n// Suportar content-type XML (input e output)\n\tstatic resolveAllPaths() {\n\t\tif (!InternalServer.pathsResolved) {\n\t\t\tInternalServer.paths.clear();\n\t\t\tInternalServer.serverClasses.forEach(classData => {\n\t\t\t\tclassData.methods.forEach(method => {\n\t\t\t\t\tif (!method.resolvedPath) {\n\t\t\t\t\t\tInternalServer.resolveProperties(classData, method);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tInternalServer.pathsResolved = true;\n\t\t}\n\t}\n\n\tstatic getPaths(): Set<string> {\n\t\tInternalServer.resolveAllPaths();\n\t\tlet result = new Set<string>();\n\t\tInternalServer.paths.forEach((value, key)=>{\n\t\t\tresult.add(key);\n\t\t});\n\t\treturn result;\n\t}\n\n\tstatic getHttpMethods(path: string) : Set<HttpMethod>{\n\t\tInternalServer.resolveAllPaths();\n\t\tlet methods : Set<HttpMethod>  = InternalServer.paths.get(path);\n\t\treturn methods || new Set<HttpMethod>();\n\t}\n\n\tprivate static resolveLanguages(serviceClass: metadata.ServiceClass, \n\t\t\t\t\t\t\t\t\tserviceMethod: metadata.ServiceMethod) : void {\n\t\tlet resolvedLanguages = new Array<string>();\n\t\tif (serviceClass.languages) {\n\t\t\tserviceClass.languages.forEach(lang => {\n\t\t\t\tresolvedLanguages.push(lang);\n\t\t\t});\n\t\t}\n\t\tif (serviceMethod.languages) {\n\t\t\tserviceMethod.languages.forEach(lang => {\n\t\t\t\tresolvedLanguages.push(lang);\n\t\t\t});\n\t\t}\n\t\tif (resolvedLanguages.length > 0) {\n\t\t\tserviceMethod.resolvedLanguages = resolvedLanguages;\n\t\t}\n\t}\n\n\tprivate static resolveAccepts(serviceClass: metadata.ServiceClass, \n\t\t\t\t\t\t\t\t  serviceMethod: metadata.ServiceMethod) : void {\n\t\tlet resolvedAccepts = new Array<string>();\n\t\tif (serviceClass.accepts) {\n\t\t\tserviceClass.accepts.forEach(accept => {\n\t\t\t\tresolvedAccepts.push(accept);\n\t\t\t});\n\t\t}\n\t\tif (serviceMethod.accepts) {\n\t\t\tserviceMethod.accepts.forEach(accept => {\n\t\t\t\tresolvedAccepts.push(accept);\n\t\t\t});\n\t\t}\n\t\tif (resolvedAccepts.length > 0) {\n\t\t\tserviceMethod.resolvedAccepts = resolvedAccepts;\n\t\t}\n\t}\n\n\tprivate static resolveProperties(serviceClass: metadata.ServiceClass, \n\t\t\t\t\t\t\t\t\t serviceMethod: metadata.ServiceMethod) : void {\n\t\tInternalServer.resolveLanguages(serviceClass, serviceMethod);\n\t\tInternalServer.resolveAccepts(serviceClass, serviceMethod);\t\t\n\t\tInternalServer.resolvePath(serviceClass, serviceMethod);\n\t}\n\n\tprivate static resolvePath(serviceClass: metadata.ServiceClass, \n\t\t\t\t\t\t\t   serviceMethod: metadata.ServiceMethod) : void {\n\t\tlet classPath: string = serviceClass.path ? serviceClass.path.trim() : \"\";\n\t\t\n\t\tlet resolvedPath = _.startsWith(classPath,'/') ? classPath : '/' + classPath;\n\t\tif (_.endsWith(resolvedPath, '/')) {\n\t\t\tresolvedPath = resolvedPath.slice(0, resolvedPath.length - 1);\n\t\t}\n\n\t\tif (serviceMethod.path) {\n\t\t\tlet methodPath: string = serviceMethod.path.trim();\n\t\t\tresolvedPath = resolvedPath + (_.startsWith(methodPath, '/') ? methodPath : '/' + methodPath);\n\t\t}\n\n\t\tlet declaredHttpMethods: Set<HttpMethod> = InternalServer.paths.get(resolvedPath);\n\t\tif (!declaredHttpMethods) {\n\t\t\tdeclaredHttpMethods = new Set<HttpMethod>();\n\t\t\tInternalServer.paths.set(resolvedPath, declaredHttpMethods);\n\t\t}\n\t\tif (declaredHttpMethods.has(serviceMethod.httpMethod)) {\n\t\t\tthrow Error(\"Duplicated declaration for path [\" + resolvedPath + \"], method [\" \n\t\t\t\t+ serviceMethod.httpMethod + \"]. \");\n\t\t}\n\t\tdeclaredHttpMethods.add(serviceMethod.httpMethod);\n\t\tserviceMethod.resolvedPath = resolvedPath;\n\t}\n}\n"]}