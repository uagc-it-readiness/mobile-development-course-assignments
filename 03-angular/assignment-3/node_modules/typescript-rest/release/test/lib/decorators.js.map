{"version":3,"sources":["../../src/lib/decorators.ts","decorators.js"],"names":["server_container_1","require","server_types_1","metadata","_","Path","path","args","_i","arguments","length","without","undefined","PathTypeDecorator","apply","PathMethodDecorator","Error","exports","AcceptLanguage","languages","AcceptLanguageTypeDecorator","AcceptLanguageMethodDecorator","Accept","accepts","AcceptTypeDecorator","AcceptMethodDecorator","Context","newArgs","concat","ParamType","context","processDecoratedProperty","processDecoratedParameter","ContextRequest","context_request","ContextResponse","context_response","ContextNext","context_next","ContextLanguage","context_accept_language","ContextAccept","context_accept","GET","target","propertyKey","descriptor","processHttpVerb","HttpMethod","POST","PUT","DELETE","HEAD","OPTIONS","PATCH","PathParam","name","parameterIndex","FileParam","file","FilesParam","files","QueryParam","query","HeaderParam","header","CookieParam","cookie","FormParam","form","Param","param","classData","InternalServer","registerServiceClass","serviceMethod","registerServiceMethod","constructor","paramType","paramTypes","Reflect","getOwnMetadata","parameters","push","MethodParam","body","key","addProperty","httpMethod","processServiceMethod","forEach","mustParseCookies","acceptMultiTypedParam","mustParseBody","mustParseForms"],"mappings":"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","file":"decorators.js","sourcesContent":["\"use strict\";\n\nimport {InternalServer} from \"./server-container\"\nimport {HttpMethod, ServiceContext} from \"./server-types\"\nimport * as metadata from \"./metadata\"\n\nimport \"reflect-metadata\";\nimport * as _ from \"lodash\";\n\n/**\n * A decorator to tell the [[Server]] that a class or a method \n * should be bound to a given path.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ PUT\n *   @ Path(\":id\")\n *   savePerson(person:Person) {\n *      // ...\n *   }\n * \n *   @ GET\n *   @ Path(\":id\")\n *   getPerson():Person {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create services that listen for requests like:\n *\n * ```\n * PUT http://mydomain/people/123 or\n * GET http://mydomain/people/123 \n * ```\n */\nexport function Path(path: string) {\n    return function (...args: any[]) {\n\t\targs = _.without(args, undefined);\n\t\tif (args.length == 1) {\n\t        return PathTypeDecorator.apply(this, [args[0], path]);\n\t    }\n\t    else if (args.length == 3 && typeof args[2] === \"object\") {\n\t        return PathMethodDecorator.apply(this, [args[0], args[1], args[2], path]);\n\t    }\n\n\t    throw new Error(\"Invalid @Path Decorator declaration.\");\n\t}\n}\n\n/**\n * A decorator to tell the [[Server]] that a class or a method \n * should only accept requests from clients that accepts one of \n * the supported languages.\n * \n * For example:\n *\n * ```\n * @ Path(\"accept\")\n * @ AcceptLanguage(\"en\", \"pt-BR\")\n * class TestAcceptService {\n *      // ...\n * }\n * ```\n *\n * Will reject requests that only accepts languages that are not\n * English or Brazilian portuguese\n *\n * If the language requested is not supported, a status code 406 returned\n */\nexport function AcceptLanguage(...languages: string[]) {\n    return function (...args: any[]) {\n\t\targs = _.without(args, undefined);\n\t    if (args.length == 1) {\n\t        return AcceptLanguageTypeDecorator.apply(this, [args[0], languages]);\n\t    }\n\t    else if (args.length == 3 && typeof args[2] === \"object\") {\n\t        return AcceptLanguageMethodDecorator.apply(this, [args[0], args[1], args[2], languages]);\n\t    }\n\n\t    throw new Error(\"Invalid @AcceptLanguage Decorator declaration.\");\n\t}\n}\n\n/**\n * A decorator to tell the [[Server]] that a class or a method \n * should only accept requests from clients that accepts one of \n * the supported mime types.\n * \n * For example:\n *\n * ```\n * @ Path(\"accept\")\n * @ Accept(\"application/json\")\n * class TestAcceptService {\n *      // ...\n * }\n * ```\n *\n * Will reject requests that only accepts mime types that are not\n * \"application/json\"\"\n *\n * If the mime type requested is not supported, a status code 406 returned\n */\nexport function Accept(...accepts: string[]) {\n    return function (...args: any[]) {\n\t\targs = _.without(args, undefined);\n\t    if (args.length == 1) {\n\t        return AcceptTypeDecorator.apply(this, [args[0], accepts]);\n\t    }\n\t    else if (args.length == 3 && typeof args[2] === \"object\") {\n\t        return AcceptMethodDecorator.apply(this, [args[0], args[1], args[2], accepts]);\n\t    }\n\n\t    throw new Error(\"Invalid @Accept Decorator declaration.\");\n\t}\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * [[ServiceContext]] object associated to the current request.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ Context\n\t context: ServiceContext;\n *       // ...\n * }\n * ```\n *\n * The field context on the above class will point to the current \n * [[ServiceContext]] instance.\n */\nexport function Context(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @Context Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the current request.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextRequest\n\t request: express.Request;\n *       // ...\n * }\n * ```\n *\n * The field request on the above class will point to the current \n * request.\n */\nexport function ContextRequest(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_request]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_request, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextRequest Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the current response object.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextResponse\n\t response: express.Response;\n *       // ...\n * }\n * ```\n *\n * The field response on the above class will point to the current \n * response object.\n */\nexport function ContextResponse(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_response]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_response, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextResponse Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the next function.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextNext \n *   next: express.NextFunction\n *       // ...\n * }\n * ```\n *\n * The next function can be used to delegate to the next registered \n * middleware the current request processing.\n */\nexport function ContextNext(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_next]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_next, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextNext Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the current context language.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextLanguage \n *   language: string\n *       // ...\n * }\n * ```\n */\nexport function ContextLanguage(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_accept_language]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_accept_language, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextLanguage Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the preferred media type for the current request.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextAccept \n *   media: string\n *       // ...\n * }\n * ```\n */\nexport function ContextAccept(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_accept]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_accept, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextAccept Decorator declaration.\");\t\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP GET requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople() {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * GET http://mydomain/people \n * ```\n */\nexport function GET(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor){\n    processHttpVerb(target, propertyKey, HttpMethod.GET);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP POST requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ POST\n *   addPerson() {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * POST http://mydomain/people \n * ```\n */\nexport function POST(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.POST);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP PUT requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ PUT\n *   @ Path(\":id\")\n *   savePerson(person: Person) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * PUT http://mydomain/people/123 \n * ```\n */\nexport function PUT(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.PUT);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP DELETE requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ DELETE\n *   @ Path(\":id\")\n *   removePerson(@ PathParam(\"id\")id: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * PUT http://mydomain/people/123 \n * ```\n */\nexport function DELETE(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.DELETE);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP HEAD requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ HEAD\n *   headPerson() {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * HEAD http://mydomain/people/123 \n * ```\n */\nexport function HEAD(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.HEAD);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP OPTIONS requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ OPTIONS\n *   optionsPerson() {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * OPTIONS http://mydomain/people/123 \n * ```\n */\nexport function OPTIONS(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.OPTIONS);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP PATCH requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ PATCH\n *   @ Path(\":id\")\n *   savePerson(person: Person) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * PATCH http://mydomain/people/123 \n * ```\n */\nexport function PATCH(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.PATCH);\n}\n\n/**\n * Creates a mapping between a fragment of the requested path and \n * a method argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   @ Path(\":id\")\n *   getPerson(@ PathParam(\"id\") id: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * GET http://mydomain/people/123 \n * ```\n * \n * And pass 123 as the id argument on getPerson method's call.\n */\nexport function PathParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.path, name);\n\t}\n}\n\n/**\n * Creates a mapping between a file on a multipart request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ POST\n *   @ Path(\"id\")\n *   addAvatar(@ PathParam(\"id\") id: string,\n *             @ FileParam(\"avatar\") file: Express.Multer.File) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * file with name \"avatar\" on the requested form to the file \n * argument on addAvatar method's call.\n */\nexport function FileParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.file, name);\n\t}\n}\n\n/**\n * Creates a mapping between a list of files on a multipart request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ POST\n *   @ Path(\"id\")\n *   addAvatar(@ PathParam(\"id\") id: string,\n *             @ FilesParam(\"avatar\") Array<file>: Express.Multer.File) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * files with name \"avatar\" on the request form to the file\n * argument on addAvatar method's call.\n */\nexport function FilesParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.files, name);\n\t}\n}\n\n/**\n * Creates a mapping between a query parameter on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ QueryParam(\"name\") name: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * GET http://mydomain/people?name=joe \n * ```\n * \n * And pass \"joe\" as the name argument on getPerson method's call.\n */\nexport function QueryParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.query, name);\n\t}\n}\n\n/**\n * Creates a mapping between a header on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ HeaderParam(\"header\") header: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * header called \"header\" to the header argument on getPerson method's call.\n */\nexport function HeaderParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.header, name);\n\t}\n}\n\n/**\n * Creates a mapping between a cookie on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ CookieParam(\"cookie\") cookie: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * cookie called \"cookie\" to the cookie argument on getPerson method's call.\n */\nexport function CookieParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.cookie, name);\n\t}\n}\n\n/**\n * Creates a mapping between a form parameter on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ FormParam(\"name\") name: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * request paramenter called \"name\" to the name argument on getPerson \n * method's call.\n */\nexport function FormParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.form, name);\n\t}\n}\n\n/**\n * Creates a mapping between a parameter on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ Param(\"name\") name: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * request paramenter called \"name\" to the name argument on getPerson \n * method's call. It will work to query parameters or form parameters \n * received in the current request.\n */\nexport function Param(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.param, name);\n\t}\n}\n\n/**\n * Decorator processor for [[AcceptLanguage]] decorator on classes\n */\nfunction AcceptLanguageTypeDecorator(target: Function, languages: string[]) {\n\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target);\n\tclassData.languages = languages;\n}\n\n/**\n * Decorator processor for [[AcceptLanguage]] decorator on methods\n */\nfunction AcceptLanguageMethodDecorator(target: any, propertyKey: string, \n\t\t\tdescriptor: PropertyDescriptor, languages: string[]) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tserviceMethod.languages = languages;\n    }\n}\n\n/**\n * Decorator processor for [[Accept]] decorator on classes\n */\nfunction AcceptTypeDecorator(target: Function, accepts: string[]) {\n\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target);\n\tclassData.accepts = accepts;\n}\n\n/**\n * Decorator processor for [[Accept]] decorator on methods\n */\nfunction AcceptMethodDecorator(target: any, propertyKey: string, \n\t\t\tdescriptor: PropertyDescriptor, accepts: string[]) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tserviceMethod.accepts = accepts;\n    }\n}\n\n/**\n * Decorator processor for [[Path]] decorator on classes\n */\nfunction PathTypeDecorator(target: Function, path: string) {\n\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target);\n\tclassData.path = path;\n}\n\n/**\n * Decorator processor for [[Path]] decorator on methods\n */\nfunction PathMethodDecorator(target: any, propertyKey: string, \n\t\t\tdescriptor: PropertyDescriptor, path: string) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tserviceMethod.path = path;\n    }\n}\n\n/**\n * Decorator processor for parameter annotations on methods\n */\nfunction processDecoratedParameter(target: Object, propertyKey: string, parameterIndex: number, \n\tparamType: metadata.ParamType, name: string) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n\tif (serviceMethod) { // does not intercept constructor\n\t\tlet paramTypes = Reflect.getOwnMetadata(\"design:paramtypes\", target, propertyKey);\n\n\t\twhile (serviceMethod.parameters.length < paramTypes.length) {\n\t\t\tserviceMethod.parameters.push(new metadata.MethodParam(null, \n\t\t\t\t\t\tparamTypes[serviceMethod.parameters.length], metadata.ParamType.body));\n\t\t}\n\t\tserviceMethod.parameters[parameterIndex] = new metadata.MethodParam(name, paramTypes[parameterIndex], paramType);\n\t}\n}\n\n/**\n * Decorator processor for annotations on properties\n */\nfunction processDecoratedProperty(target: Function, key: string, paramType: metadata.ParamType) {\n\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target.constructor);\n    classData.addProperty(key, paramType);\n}\n\n\n/**\n * Decorator processor for HTTP verb annotations on methods\n */\nfunction processHttpVerb(target: any, propertyKey: string,\n\thttpMethod: HttpMethod) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tif (serviceMethod.httpMethod) {\n\t\t\tthrow new Error(\"Method is already annotated with @\" +\n\t\t\t\tserviceMethod.httpMethod +\n\t\t\t\t\". You can only map a method to one HTTP verb.\");\n\t\t}\n\t\tserviceMethod.httpMethod = httpMethod;\n\t\tprocessServiceMethod(target, propertyKey, serviceMethod);\n    }\n}\n\n/**\n * Extract metadata for rest methods\n */\nfunction processServiceMethod(target: any, propertyKey: string, serviceMethod: metadata.ServiceMethod) {\n\tserviceMethod.name = propertyKey;\n\tlet paramTypes = Reflect.getOwnMetadata(\"design:paramtypes\", target, propertyKey);\n\twhile (paramTypes.length > serviceMethod.parameters.length) {\n\t\tserviceMethod.parameters.push(new metadata.MethodParam(null,\n\t\t\tparamTypes[serviceMethod.parameters.length], metadata.ParamType.body));\n\t}\n\n\tserviceMethod.parameters.forEach(param => {\n\t\tif (param.paramType == metadata.ParamType.cookie) {\n\t\t\tserviceMethod.mustParseCookies = true;\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.file) {\n\t\t\tserviceMethod.files.push(new metadata.FileParam(param.name, true));\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.files) {\n\t\t\tserviceMethod.files.push(new metadata.FileParam(param.name, false));\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.param) {\n\t\t\tserviceMethod.acceptMultiTypedParam = true;\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.form) {\n\t\t\tif (serviceMethod.mustParseBody) {\n\t\t\t\tthrow Error(\"Can not use form parameters with a body parameter on the same method.\");\n\t\t\t}\n\t\t\tserviceMethod.mustParseForms = true;\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.body) {\n\t\t\tif (serviceMethod.mustParseForms) {\n\t\t\t\tthrow Error(\"Can not use form parameters with a body parameter on the same method.\");\n\t\t\t}\n\t\t\tif (serviceMethod.mustParseBody) {\n\t\t\t\tthrow Error(\"Can not use more than one body parameter on the same method.\");\n\t\t\t}\n\t\t\tserviceMethod.mustParseBody = true;\n\t\t}\n\t});\n}","\"use strict\";\nvar server_container_1 = require(\"./server-container\");\nvar server_types_1 = require(\"./server-types\");\nvar metadata = require(\"./metadata\");\nrequire(\"reflect-metadata\");\nvar _ = require(\"lodash\");\nfunction Path(path) {\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        args = _.without(args, undefined);\n        if (args.length == 1) {\n            return PathTypeDecorator.apply(this, [args[0], path]);\n        }\n        else if (args.length == 3 && typeof args[2] === \"object\") {\n            return PathMethodDecorator.apply(this, [args[0], args[1], args[2], path]);\n        }\n        throw new Error(\"Invalid @Path Decorator declaration.\");\n    };\n}\nexports.Path = Path;\nfunction AcceptLanguage() {\n    var languages = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        languages[_i] = arguments[_i];\n    }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        args = _.without(args, undefined);\n        if (args.length == 1) {\n            return AcceptLanguageTypeDecorator.apply(this, [args[0], languages]);\n        }\n        else if (args.length == 3 && typeof args[2] === \"object\") {\n            return AcceptLanguageMethodDecorator.apply(this, [args[0], args[1], args[2], languages]);\n        }\n        throw new Error(\"Invalid @AcceptLanguage Decorator declaration.\");\n    };\n}\nexports.AcceptLanguage = AcceptLanguage;\nfunction Accept() {\n    var accepts = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        accepts[_i] = arguments[_i];\n    }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        args = _.without(args, undefined);\n        if (args.length == 1) {\n            return AcceptTypeDecorator.apply(this, [args[0], accepts]);\n        }\n        else if (args.length == 3 && typeof args[2] === \"object\") {\n            return AcceptMethodDecorator.apply(this, [args[0], args[1], args[2], accepts]);\n        }\n        throw new Error(\"Invalid @Accept Decorator declaration.\");\n    };\n}\nexports.Accept = Accept;\nfunction Context() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    args = _.without(args, undefined);\n    if (args.length == 2) {\n        var newArgs = args.concat([metadata.ParamType.context]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n        var newArgs = args.concat([metadata.ParamType.context, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n    throw new Error(\"Invalid @Context Decorator declaration.\");\n}\nexports.Context = Context;\nfunction ContextRequest() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    args = _.without(args, undefined);\n    if (args.length == 2) {\n        var newArgs = args.concat([metadata.ParamType.context_request]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n        var newArgs = args.concat([metadata.ParamType.context_request, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n    throw new Error(\"Invalid @ContextRequest Decorator declaration.\");\n}\nexports.ContextRequest = ContextRequest;\nfunction ContextResponse() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    args = _.without(args, undefined);\n    if (args.length == 2) {\n        var newArgs = args.concat([metadata.ParamType.context_response]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n        var newArgs = args.concat([metadata.ParamType.context_response, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n    throw new Error(\"Invalid @ContextResponse Decorator declaration.\");\n}\nexports.ContextResponse = ContextResponse;\nfunction ContextNext() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    args = _.without(args, undefined);\n    if (args.length == 2) {\n        var newArgs = args.concat([metadata.ParamType.context_next]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n        var newArgs = args.concat([metadata.ParamType.context_next, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n    throw new Error(\"Invalid @ContextNext Decorator declaration.\");\n}\nexports.ContextNext = ContextNext;\nfunction ContextLanguage() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    args = _.without(args, undefined);\n    if (args.length == 2) {\n        var newArgs = args.concat([metadata.ParamType.context_accept_language]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n        var newArgs = args.concat([metadata.ParamType.context_accept_language, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n    throw new Error(\"Invalid @ContextLanguage Decorator declaration.\");\n}\nexports.ContextLanguage = ContextLanguage;\nfunction ContextAccept() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    args = _.without(args, undefined);\n    if (args.length == 2) {\n        var newArgs = args.concat([metadata.ParamType.context_accept]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n        var newArgs = args.concat([metadata.ParamType.context_accept, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n    throw new Error(\"Invalid @ContextAccept Decorator declaration.\");\n}\nexports.ContextAccept = ContextAccept;\nfunction GET(target, propertyKey, descriptor) {\n    processHttpVerb(target, propertyKey, server_types_1.HttpMethod.GET);\n}\nexports.GET = GET;\nfunction POST(target, propertyKey, descriptor) {\n    processHttpVerb(target, propertyKey, server_types_1.HttpMethod.POST);\n}\nexports.POST = POST;\nfunction PUT(target, propertyKey, descriptor) {\n    processHttpVerb(target, propertyKey, server_types_1.HttpMethod.PUT);\n}\nexports.PUT = PUT;\nfunction DELETE(target, propertyKey, descriptor) {\n    processHttpVerb(target, propertyKey, server_types_1.HttpMethod.DELETE);\n}\nexports.DELETE = DELETE;\nfunction HEAD(target, propertyKey, descriptor) {\n    processHttpVerb(target, propertyKey, server_types_1.HttpMethod.HEAD);\n}\nexports.HEAD = HEAD;\nfunction OPTIONS(target, propertyKey, descriptor) {\n    processHttpVerb(target, propertyKey, server_types_1.HttpMethod.OPTIONS);\n}\nexports.OPTIONS = OPTIONS;\nfunction PATCH(target, propertyKey, descriptor) {\n    processHttpVerb(target, propertyKey, server_types_1.HttpMethod.PATCH);\n}\nexports.PATCH = PATCH;\nfunction PathParam(name) {\n    return function (target, propertyKey, parameterIndex) {\n        processDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.path, name);\n    };\n}\nexports.PathParam = PathParam;\nfunction FileParam(name) {\n    return function (target, propertyKey, parameterIndex) {\n        processDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.file, name);\n    };\n}\nexports.FileParam = FileParam;\nfunction FilesParam(name) {\n    return function (target, propertyKey, parameterIndex) {\n        processDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.files, name);\n    };\n}\nexports.FilesParam = FilesParam;\nfunction QueryParam(name) {\n    return function (target, propertyKey, parameterIndex) {\n        processDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.query, name);\n    };\n}\nexports.QueryParam = QueryParam;\nfunction HeaderParam(name) {\n    return function (target, propertyKey, parameterIndex) {\n        processDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.header, name);\n    };\n}\nexports.HeaderParam = HeaderParam;\nfunction CookieParam(name) {\n    return function (target, propertyKey, parameterIndex) {\n        processDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.cookie, name);\n    };\n}\nexports.CookieParam = CookieParam;\nfunction FormParam(name) {\n    return function (target, propertyKey, parameterIndex) {\n        processDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.form, name);\n    };\n}\nexports.FormParam = FormParam;\nfunction Param(name) {\n    return function (target, propertyKey, parameterIndex) {\n        processDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.param, name);\n    };\n}\nexports.Param = Param;\nfunction AcceptLanguageTypeDecorator(target, languages) {\n    var classData = server_container_1.InternalServer.registerServiceClass(target);\n    classData.languages = languages;\n}\nfunction AcceptLanguageMethodDecorator(target, propertyKey, descriptor, languages) {\n    var serviceMethod = server_container_1.InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) {\n        serviceMethod.languages = languages;\n    }\n}\nfunction AcceptTypeDecorator(target, accepts) {\n    var classData = server_container_1.InternalServer.registerServiceClass(target);\n    classData.accepts = accepts;\n}\nfunction AcceptMethodDecorator(target, propertyKey, descriptor, accepts) {\n    var serviceMethod = server_container_1.InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) {\n        serviceMethod.accepts = accepts;\n    }\n}\nfunction PathTypeDecorator(target, path) {\n    var classData = server_container_1.InternalServer.registerServiceClass(target);\n    classData.path = path;\n}\nfunction PathMethodDecorator(target, propertyKey, descriptor, path) {\n    var serviceMethod = server_container_1.InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) {\n        serviceMethod.path = path;\n    }\n}\nfunction processDecoratedParameter(target, propertyKey, parameterIndex, paramType, name) {\n    var serviceMethod = server_container_1.InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) {\n        var paramTypes = Reflect.getOwnMetadata(\"design:paramtypes\", target, propertyKey);\n        while (serviceMethod.parameters.length < paramTypes.length) {\n            serviceMethod.parameters.push(new metadata.MethodParam(null, paramTypes[serviceMethod.parameters.length], metadata.ParamType.body));\n        }\n        serviceMethod.parameters[parameterIndex] = new metadata.MethodParam(name, paramTypes[parameterIndex], paramType);\n    }\n}\nfunction processDecoratedProperty(target, key, paramType) {\n    var classData = server_container_1.InternalServer.registerServiceClass(target.constructor);\n    classData.addProperty(key, paramType);\n}\nfunction processHttpVerb(target, propertyKey, httpMethod) {\n    var serviceMethod = server_container_1.InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) {\n        if (serviceMethod.httpMethod) {\n            throw new Error(\"Method is already annotated with @\" +\n                serviceMethod.httpMethod +\n                \". You can only map a method to one HTTP verb.\");\n        }\n        serviceMethod.httpMethod = httpMethod;\n        processServiceMethod(target, propertyKey, serviceMethod);\n    }\n}\nfunction processServiceMethod(target, propertyKey, serviceMethod) {\n    serviceMethod.name = propertyKey;\n    var paramTypes = Reflect.getOwnMetadata(\"design:paramtypes\", target, propertyKey);\n    while (paramTypes.length > serviceMethod.parameters.length) {\n        serviceMethod.parameters.push(new metadata.MethodParam(null, paramTypes[serviceMethod.parameters.length], metadata.ParamType.body));\n    }\n    serviceMethod.parameters.forEach(function (param) {\n        if (param.paramType == metadata.ParamType.cookie) {\n            serviceMethod.mustParseCookies = true;\n        }\n        else if (param.paramType == metadata.ParamType.file) {\n            serviceMethod.files.push(new metadata.FileParam(param.name, true));\n        }\n        else if (param.paramType == metadata.ParamType.files) {\n            serviceMethod.files.push(new metadata.FileParam(param.name, false));\n        }\n        else if (param.paramType == metadata.ParamType.param) {\n            serviceMethod.acceptMultiTypedParam = true;\n        }\n        else if (param.paramType == metadata.ParamType.form) {\n            if (serviceMethod.mustParseBody) {\n                throw Error(\"Can not use form parameters with a body parameter on the same method.\");\n            }\n            serviceMethod.mustParseForms = true;\n        }\n        else if (param.paramType == metadata.ParamType.body) {\n            if (serviceMethod.mustParseForms) {\n                throw Error(\"Can not use form parameters with a body parameter on the same method.\");\n            }\n            if (serviceMethod.mustParseBody) {\n                throw Error(\"Can not use more than one body parameter on the same method.\");\n            }\n            serviceMethod.mustParseBody = true;\n        }\n    });\n}\n"]}