{"version":3,"sources":["../../src/lib/decorators.ts"],"names":[],"mappings":"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","file":"decorators.js","sourcesContent":["\"use strict\";\n\nimport {InternalServer} from \"./server-container\"\nimport {HttpMethod, ServiceContext} from \"./server-types\"\nimport * as metadata from \"./metadata\"\n\nimport \"reflect-metadata\";\nimport * as _ from \"lodash\";\n\n/**\n * A decorator to tell the [[Server]] that a class or a method \n * should be bound to a given path.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ PUT\n *   @ Path(\":id\")\n *   savePerson(person:Person) {\n *      // ...\n *   }\n * \n *   @ GET\n *   @ Path(\":id\")\n *   getPerson():Person {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create services that listen for requests like:\n *\n * ```\n * PUT http://mydomain/people/123 or\n * GET http://mydomain/people/123 \n * ```\n */\nexport function Path(path: string) {\n    return function (...args: any[]) {\n\t\targs = _.without(args, undefined);\n\t\tif (args.length == 1) {\n\t        return PathTypeDecorator.apply(this, [args[0], path]);\n\t    }\n\t    else if (args.length == 3 && typeof args[2] === \"object\") {\n\t        return PathMethodDecorator.apply(this, [args[0], args[1], args[2], path]);\n\t    }\n\n\t    throw new Error(\"Invalid @Path Decorator declaration.\");\n\t}\n}\n\n/**\n * A decorator to tell the [[Server]] that a class or a method \n * should only accept requests from clients that accepts one of \n * the supported languages.\n * \n * For example:\n *\n * ```\n * @ Path(\"accept\")\n * @ AcceptLanguage(\"en\", \"pt-BR\")\n * class TestAcceptService {\n *      // ...\n * }\n * ```\n *\n * Will reject requests that only accepts languages that are not\n * English or Brazilian portuguese\n *\n * If the language requested is not supported, a status code 406 returned\n */\nexport function AcceptLanguage(...languages: string[]) {\n    return function (...args: any[]) {\n\t\targs = _.without(args, undefined);\n\t    if (args.length == 1) {\n\t        return AcceptLanguageTypeDecorator.apply(this, [args[0], languages]);\n\t    }\n\t    else if (args.length == 3 && typeof args[2] === \"object\") {\n\t        return AcceptLanguageMethodDecorator.apply(this, [args[0], args[1], args[2], languages]);\n\t    }\n\n\t    throw new Error(\"Invalid @AcceptLanguage Decorator declaration.\");\n\t}\n}\n\n/**\n * A decorator to tell the [[Server]] that a class or a method \n * should only accept requests from clients that accepts one of \n * the supported mime types.\n * \n * For example:\n *\n * ```\n * @ Path(\"accept\")\n * @ Accept(\"application/json\")\n * class TestAcceptService {\n *      // ...\n * }\n * ```\n *\n * Will reject requests that only accepts mime types that are not\n * \"application/json\"\"\n *\n * If the mime type requested is not supported, a status code 406 returned\n */\nexport function Accept(...accepts: string[]) {\n    return function (...args: any[]) {\n\t\targs = _.without(args, undefined);\n\t    if (args.length == 1) {\n\t        return AcceptTypeDecorator.apply(this, [args[0], accepts]);\n\t    }\n\t    else if (args.length == 3 && typeof args[2] === \"object\") {\n\t        return AcceptMethodDecorator.apply(this, [args[0], args[1], args[2], accepts]);\n\t    }\n\n\t    throw new Error(\"Invalid @Accept Decorator declaration.\");\n\t}\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * [[ServiceContext]] object associated to the current request.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ Context\n\t context: ServiceContext;\n *       // ...\n * }\n * ```\n *\n * The field context on the above class will point to the current \n * [[ServiceContext]] instance.\n */\nexport function Context(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @Context Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the current request.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextRequest\n\t request: express.Request;\n *       // ...\n * }\n * ```\n *\n * The field request on the above class will point to the current \n * request.\n */\nexport function ContextRequest(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_request]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_request, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextRequest Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the current response object.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextResponse\n\t response: express.Response;\n *       // ...\n * }\n * ```\n *\n * The field response on the above class will point to the current \n * response object.\n */\nexport function ContextResponse(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_response]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_response, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextResponse Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the next function.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextNext \n *   next: express.NextFunction\n *       // ...\n * }\n * ```\n *\n * The next function can be used to delegate to the next registered \n * middleware the current request processing.\n */\nexport function ContextNext(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_next]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_next, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextNext Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the current context language.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextLanguage \n *   language: string\n *       // ...\n * }\n * ```\n */\nexport function ContextLanguage(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_accept_language]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_accept_language, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextLanguage Decorator declaration.\");\t\n}\n\n/**\n * A decorator to be used on class properties or on service method arguments\n * to inform that the decorated property or argument should be bound to the\n * the preferred media type for the current request.\n * \n * For example:\n *\n * ```\n * @ Path(\"context\")\n * class TestService {\n *   @ ContextAccept \n *   media: string\n *       // ...\n * }\n * ```\n */\nexport function ContextAccept(...args: any[]) {\n\targs = _.without(args, undefined);\n\tif (args.length == 2){\n    \tlet newArgs = args.concat([metadata.ParamType.context_accept]);\n        return processDecoratedProperty.apply(this, newArgs);\n    }\n    else if (args.length == 3 && typeof args[2] === \"number\") {\n    \tlet newArgs = args.concat([metadata.ParamType.context_accept, null]);\n        return processDecoratedParameter.apply(this, newArgs);\n    }\n\n    throw new Error(\"Invalid @ContextAccept Decorator declaration.\");\t\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP GET requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople() {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * GET http://mydomain/people \n * ```\n */\nexport function GET(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor){\n    processHttpVerb(target, propertyKey, HttpMethod.GET);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP POST requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ POST\n *   addPerson() {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * POST http://mydomain/people \n * ```\n */\nexport function POST(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.POST);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP PUT requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ PUT\n *   @ Path(\":id\")\n *   savePerson(person: Person) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * PUT http://mydomain/people/123 \n * ```\n */\nexport function PUT(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.PUT);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP DELETE requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ DELETE\n *   @ Path(\":id\")\n *   removePerson(@ PathParam(\"id\")id: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * PUT http://mydomain/people/123 \n * ```\n */\nexport function DELETE(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.DELETE);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP HEAD requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ HEAD\n *   headPerson() {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * HEAD http://mydomain/people/123 \n * ```\n */\nexport function HEAD(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.HEAD);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP OPTIONS requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ OPTIONS\n *   optionsPerson() {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * OPTIONS http://mydomain/people/123 \n * ```\n */\nexport function OPTIONS(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.OPTIONS);\n}\n\n/**\n * A decorator to tell the [[Server]] that a method \n * should be called to process HTTP PATCH requests.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ PATCH\n *   @ Path(\":id\")\n *   savePerson(person: Person) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * PATCH http://mydomain/people/123 \n * ```\n */\nexport function PATCH(target: any, propertyKey: string,\n\tdescriptor: PropertyDescriptor) {\n    processHttpVerb(target, propertyKey, HttpMethod.PATCH);\n}\n\n/**\n * Creates a mapping between a fragment of the requested path and \n * a method argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   @ Path(\":id\")\n *   getPerson(@ PathParam(\"id\") id: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * GET http://mydomain/people/123 \n * ```\n * \n * And pass 123 as the id argument on getPerson method's call.\n */\nexport function PathParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.path, name);\n\t}\n}\n\n/**\n * Creates a mapping between a file on a multipart request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ POST\n *   @ Path(\"id\")\n *   addAvatar(@ PathParam(\"id\") id: string,\n *             @ FileParam(\"avatar\") file: Express.Multer.File) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * file with name \"avatar\" on the requested form to the file \n * argument on addAvatar method's call.\n */\nexport function FileParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.file, name);\n\t}\n}\n\n/**\n * Creates a mapping between a list of files on a multipart request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ POST\n *   @ Path(\"id\")\n *   addAvatar(@ PathParam(\"id\") id: string,\n *             @ FilesParam(\"avatar\") Array<file>: Express.Multer.File) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * files with name \"avatar\" on the request form to the file\n * argument on addAvatar method's call.\n */\nexport function FilesParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.files, name);\n\t}\n}\n\n/**\n * Creates a mapping between a query parameter on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ QueryParam(\"name\") name: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests like:\n *\n * ```\n * GET http://mydomain/people?name=joe \n * ```\n * \n * And pass \"joe\" as the name argument on getPerson method's call.\n */\nexport function QueryParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.query, name);\n\t}\n}\n\n/**\n * Creates a mapping between a header on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ HeaderParam(\"header\") header: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * header called \"header\" to the header argument on getPerson method's call.\n */\nexport function HeaderParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.header, name);\n\t}\n}\n\n/**\n * Creates a mapping between a cookie on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ CookieParam(\"cookie\") cookie: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * cookie called \"cookie\" to the cookie argument on getPerson method's call.\n */\nexport function CookieParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.cookie, name);\n\t}\n}\n\n/**\n * Creates a mapping between a form parameter on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ FormParam(\"name\") name: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * request paramenter called \"name\" to the name argument on getPerson \n * method's call.\n */\nexport function FormParam(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.form, name);\n\t}\n}\n\n/**\n * Creates a mapping between a parameter on request and a method\n * argument.\n * \n * For example:\n *\n * ```\n * @ Path(\"people\")\n * class PeopleService {\n *   @ GET\n *   getPeople(@ Param(\"name\") name: string) {\n *      // ...\n *   }\n * }\n * ```\n *\n * Will create a service that listen for requests and bind the \n * request paramenter called \"name\" to the name argument on getPerson \n * method's call. It will work to query parameters or form parameters \n * received in the current request.\n */\nexport function Param(name: string) {\n    return function(target: Object, propertyKey: string, parameterIndex: number) {\n\t\tprocessDecoratedParameter(target, propertyKey, parameterIndex, metadata.ParamType.param, name);\n\t}\n}\n\n/**\n * Decorator processor for [[AcceptLanguage]] decorator on classes\n */\nfunction AcceptLanguageTypeDecorator(target: Function, languages: string[]) {\n\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target);\n\tclassData.languages = languages;\n}\n\n/**\n * Decorator processor for [[AcceptLanguage]] decorator on methods\n */\nfunction AcceptLanguageMethodDecorator(target: any, propertyKey: string, \n\t\t\tdescriptor: PropertyDescriptor, languages: string[]) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tserviceMethod.languages = languages;\n    }\n}\n\n/**\n * Decorator processor for [[Accept]] decorator on classes\n */\nfunction AcceptTypeDecorator(target: Function, accepts: string[]) {\n\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target);\n\tclassData.accepts = accepts;\n}\n\n/**\n * Decorator processor for [[Accept]] decorator on methods\n */\nfunction AcceptMethodDecorator(target: any, propertyKey: string, \n\t\t\tdescriptor: PropertyDescriptor, accepts: string[]) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tserviceMethod.accepts = accepts;\n    }\n}\n\n/**\n * Decorator processor for [[Path]] decorator on classes\n */\nfunction PathTypeDecorator(target: Function, path: string) {\n\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target);\n\tclassData.path = path;\n}\n\n/**\n * Decorator processor for [[Path]] decorator on methods\n */\nfunction PathMethodDecorator(target: any, propertyKey: string, \n\t\t\tdescriptor: PropertyDescriptor, path: string) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tserviceMethod.path = path;\n    }\n}\n\n/**\n * Decorator processor for parameter annotations on methods\n */\nfunction processDecoratedParameter(target: Object, propertyKey: string, parameterIndex: number, \n\tparamType: metadata.ParamType, name: string) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n\tif (serviceMethod) { // does not intercept constructor\n\t\tlet paramTypes = Reflect.getOwnMetadata(\"design:paramtypes\", target, propertyKey);\n\n\t\twhile (serviceMethod.parameters.length < paramTypes.length) {\n\t\t\tserviceMethod.parameters.push(new metadata.MethodParam(null, \n\t\t\t\t\t\tparamTypes[serviceMethod.parameters.length], metadata.ParamType.body));\n\t\t}\n\t\tserviceMethod.parameters[parameterIndex] = new metadata.MethodParam(name, paramTypes[parameterIndex], paramType);\n\t}\n}\n\n/**\n * Decorator processor for annotations on properties\n */\nfunction processDecoratedProperty(target: Function, key: string, paramType: metadata.ParamType) {\n\tlet classData: metadata.ServiceClass = InternalServer.registerServiceClass(target.constructor);\n    classData.addProperty(key, paramType);\n}\n\n\n/**\n * Decorator processor for HTTP verb annotations on methods\n */\nfunction processHttpVerb(target: any, propertyKey: string,\n\thttpMethod: HttpMethod) {\n\tlet serviceMethod: metadata.ServiceMethod = InternalServer.registerServiceMethod(target.constructor, propertyKey);\n    if (serviceMethod) { // does not intercept constructor\n\t\tif (serviceMethod.httpMethod) {\n\t\t\tthrow new Error(\"Method is already annotated with @\" +\n\t\t\t\tserviceMethod.httpMethod +\n\t\t\t\t\". You can only map a method to one HTTP verb.\");\n\t\t}\n\t\tserviceMethod.httpMethod = httpMethod;\n\t\tprocessServiceMethod(target, propertyKey, serviceMethod);\n    }\n}\n\n/**\n * Extract metadata for rest methods\n */\nfunction processServiceMethod(target: any, propertyKey: string, serviceMethod: metadata.ServiceMethod) {\n\tserviceMethod.name = propertyKey;\n\tlet paramTypes = Reflect.getOwnMetadata(\"design:paramtypes\", target, propertyKey);\n\twhile (paramTypes.length > serviceMethod.parameters.length) {\n\t\tserviceMethod.parameters.push(new metadata.MethodParam(null,\n\t\t\tparamTypes[serviceMethod.parameters.length], metadata.ParamType.body));\n\t}\n\n\tserviceMethod.parameters.forEach(param => {\n\t\tif (param.paramType == metadata.ParamType.cookie) {\n\t\t\tserviceMethod.mustParseCookies = true;\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.file) {\n\t\t\tserviceMethod.files.push(new metadata.FileParam(param.name, true));\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.files) {\n\t\t\tserviceMethod.files.push(new metadata.FileParam(param.name, false));\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.param) {\n\t\t\tserviceMethod.acceptMultiTypedParam = true;\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.form) {\n\t\t\tif (serviceMethod.mustParseBody) {\n\t\t\t\tthrow Error(\"Can not use form parameters with a body parameter on the same method.\");\n\t\t\t}\n\t\t\tserviceMethod.mustParseForms = true;\n\t\t}\n\t\telse if (param.paramType == metadata.ParamType.body) {\n\t\t\tif (serviceMethod.mustParseForms) {\n\t\t\t\tthrow Error(\"Can not use form parameters with a body parameter on the same method.\");\n\t\t\t}\n\t\t\tif (serviceMethod.mustParseBody) {\n\t\t\t\tthrow Error(\"Can not use more than one body parameter on the same method.\");\n\t\t\t}\n\t\t\tserviceMethod.mustParseBody = true;\n\t\t}\n\t});\n}"]}