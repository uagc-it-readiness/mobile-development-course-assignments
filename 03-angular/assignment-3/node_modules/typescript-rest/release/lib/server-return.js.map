{"version":3,"sources":["../../src/lib/server-return.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAEb,+CAAkD;AAMlD;IAAiC,+BAAkB;IAKlD,qBAAY,QAAgB;eAC3B,kBAAM,QAAQ,EAAE,GAAG,CAAC;IACrB,CAAC;IACF,kBAAC;AAAD,CARA,AAQC,CARgC,iCAAkB,GAQlD;AARY,kCAAW;AAexB;IAAqC,mCAAkB;IAMtD,yBAAY,QAAgB;eAC3B,kBAAM,QAAQ,EAAE,GAAG,CAAC;IACrB,CAAC;IACF,sBAAC;AAAD,CATA,AASC,CAToC,iCAAkB,GAStD;AATY,0CAAe;AAgB5B;IAAsC,oCAAkB;IAKvD,0BAAY,QAAgB;eAC3B,kBAAM,QAAQ,EAAE,GAAG,CAAC;IACrB,CAAC;IACF,uBAAC;AAAD,CARA,AAQC,CARqC,iCAAkB,GAQvD;AARY,4CAAgB;AAe7B;IAAsC,oCAAkB;IAKvD,0BAAY,QAAgB;eAC3B,kBAAM,QAAQ,EAAE,GAAG,CAAC;IACrB,CAAC;IACF,uBAAC;AAAD,CARA,AAQC,CARqC,iCAAkB,GAQvD;AARY,4CAAgB;AAa7B;IAMC,0BAAmB,QAAgB,EAAS,QAAgB;QAAzC,aAAQ,GAAR,QAAQ,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAQ;IAAG,CAAC;IACjE,uBAAC;AAAD,CAPA,AAOC,IAAA;AAPY,4CAAgB;AAY7B;IAOC,4BAAmB,OAAe,EAAS,QAAgB,EAAS,QAAgB;QAAjE,YAAO,GAAP,OAAO,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAQ;QAAS,aAAQ,GAAR,QAAQ,CAAQ;IAAG,CAAC;IACzF,yBAAC;AAAD,CARA,AAQC,IAAA;AARY,gDAAkB","file":"server-return.js","sourcesContent":["\"use strict\";\n\nimport {ReferencedResource} from \"./server-types\"; \n\n/**\n * Inform that a new resource was created. Server will \n * add a Location header and set status to 201\n */\nexport class NewResource extends ReferencedResource {\n\t/**\n\t * Constructor. Receives the location of the new resource created.\n\t * @param location To be added to the Location header on response\n\t */\n\tconstructor(location: string) {\n\t\tsuper(location, 201);\n\t}\n}\n\n/**\n * Inform that the request was accepted but is not completed.\n * A Location header should inform the location where the user\n * can monitor his request processing status.\n */\nexport class RequestAccepted extends ReferencedResource {\n\t/**\n\t * Constructor. Receives the location where information about the \n\t * request processing can be found.\n\t * @param location To be added to the Location header on response\n\t */\n\tconstructor(location: string) {\n\t\tsuper(location, 202);\n\t}\n}\n\n/**\n * Inform that the resource has permanently\n * moved to a new location, and that future references should use a\n * new URI with their requests.\n */\nexport class MovedPermanently extends ReferencedResource {\n\t/**\n\t * Constructor. Receives the location where the resource can be found.\n\t * @param location To be added to the Location header on response\n\t */\n\tconstructor(location: string) {\n\t\tsuper(location, 301);\n\t}\n}\n\n/**\n * Inform that the resource has temporarily\n * moved to another location, but that future references should\n * still use the original URI to access the resource.\n */\nexport class MovedTemporarily extends ReferencedResource {\n\t/**\n\t * Constructor. Receives the location where the resource can be found.\n\t * @param location To be added to the Location header on response\n\t */\n\tconstructor(location: string) {\n\t\tsuper(location, 302);\n\t}\n}\n\n/**\n * Used to download a resource.\n */\nexport class DownloadResource {\n\t/**\n\t * Constructor. \n\t * @param filePath The file path to download.\n\t * @param fileName The file name\n\t */\n\tconstructor(public filePath: string, public fileName: string) {}\n}\n\n/**\n * Used to download binary data as a file.\n */\nexport class DownloadBinaryData {\n\t/**\n\t * Constructor. Receives the location of the resource.\n\t * @param content The binary data to be downloaded as a file.\n\t * @param mimeType The mime-type to be passed on Content-Type header.\n\t * @param fileName The file name\n\t */\n\tconstructor(public content: Buffer, public mimeType: string, public fileName: string) {}\n}\n"]}