{"version":3,"sources":["../../src/lib/metadata.ts"],"names":[],"mappings":"AACA,YAAY,CAAC;AAOb;IACC,sBAAY,WAAqB;QAChC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,EAAwB,CAAC;IAChD,CAAC;IASD,kCAAW,GAAX,UAAY,GAAW,EAAE,SAAoB;QAC5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;YAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,EAAoB,CAAC;QAC/C,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IACrC,CAAC;IAED,oCAAa,GAAb;QACC,MAAM,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC;IACtD,CAAC;IACF,mBAAC;AAAD,CAvBA,AAuBC,IAAA;AAvBY,oCAAY;AA4BzB;IAAA;QAKC,eAAU,GAAuB,IAAI,KAAK,EAAe,CAAC;QAC1D,qBAAgB,GAAY,KAAK,CAAC;QAClC,UAAK,GAAqB,IAAI,KAAK,EAAa,CAAC;QACjD,kBAAa,GAAY,KAAK,CAAC;QAC/B,mBAAc,GAAY,KAAK,CAAC;QAChC,0BAAqB,GAAY,KAAK,CAAC;IAKxC,CAAC;IAAD,oBAAC;AAAD,CAfA,AAeC,IAAA;AAfY,sCAAa;AAoB1B;IACC,mBAAY,IAAY,EAAE,UAAmB;QAC5C,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC9B,CAAC;IAIF,gBAAC;AAAD,CARA,AAQC,IAAA;AARY,8BAAS;AAatB;IACC,qBAAY,IAAY,EAAE,IAAc,EAAE,SAAoB;QAC7D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC5B,CAAC;IAKF,kBAAC;AAAD,CAVA,AAUC,IAAA;AAVY,kCAAW;AAexB,IAAY,SAgBX;AAhBD,WAAY,SAAS;IACpB,yCAAI,CAAA;IACJ,2CAAK,CAAA;IACL,6CAAM,CAAA;IACN,6CAAM,CAAA;IACN,yCAAI,CAAA;IACJ,yCAAI,CAAA;IACJ,2CAAK,CAAA;IACL,yCAAI,CAAA;IACJ,2CAAK,CAAA;IACL,+CAAO,CAAA;IACP,gEAAe,CAAA;IACf,kEAAgB,CAAA;IAChB,0DAAY,CAAA;IACZ,8DAAc,CAAA;IACd,gFAAuB,CAAA;AACxB,CAAC,EAhBW,SAAS,GAAT,iBAAS,KAAT,iBAAS,QAgBpB","file":"metadata.js","sourcesContent":["/// <reference path=\"./collections.d.ts\" />\n\"use strict\";\n\nimport {HttpMethod} from \"./server-types\"\n\n/**\n * Metadata for REST service classes\n */\nexport class ServiceClass {\n\tconstructor(targetClass: Function) {\n\t\tthis.targetClass = targetClass;\n\t\tthis.methods = new Map<string,ServiceMethod>();\n\t}\n\n\ttargetClass: Function;\n\tpath: string;\n\tmethods: Map<string,ServiceMethod>;\n\tlanguages: Array<string>;\n\taccepts: Array<string>;\n\tproperties: Map<string,ParamType>;\n\t\n\taddProperty(key: string, paramType: ParamType) {\n\t\tif (!this.hasProperties()) {\n\t\t\tthis.properties = new Map<string,ParamType>();\n\t\t}\n\t\tthis.properties.set(key, paramType);\n\t}\n\n\thasProperties(): boolean {\n\t\treturn (this.properties && this.properties.size > 0);\n\t}\n}\n\n/**\n * Metadata for REST service methods\n */\nexport class ServiceMethod {\n\tname: string;\n\tpath: string;\n\tresolvedPath: string;\n\thttpMethod: HttpMethod;\n\tparameters: Array<MethodParam> = new Array<MethodParam>();\n\tmustParseCookies: boolean = false;\n\tfiles: Array<FileParam> = new Array<FileParam>();\n\tmustParseBody: boolean = false;\n\tmustParseForms: boolean = false;\n\tacceptMultiTypedParam: boolean = false;\n\tlanguages: Array<string>;\n\taccepts: Array<string>;\n\tresolvedLanguages: Array<string>;\n\tresolvedAccepts: Array<string>;\n}\n\n/**\n * Metadata for File parameters on REST methods\n */\nexport class FileParam {\n\tconstructor(name: string, singleFile: boolean) {\n\t\tthis.name = name;\n\t\tthis.singleFile = singleFile;\n\t}\n\n\tname: string;\n\tsingleFile: boolean;\n}\n\n/**\n * Metadata for REST service method parameters\n */\nexport class MethodParam {\n\tconstructor(name: string, type: Function, paramType: ParamType) {\n\t\tthis.name = name;\n\t\tthis.type = type;\n\t\tthis.paramType = paramType;\n\t}\n\n\tname: string;\n\ttype: Function;\n\tparamType: ParamType;\n}\n\n/**\n * Enumeration of accepted parameter types\n */\nexport enum ParamType {\n\tpath,\n\tquery,\n\theader,\n\tcookie,\n\tform,\n\tbody,\n\tparam,\n\tfile, \n\tfiles, \n\tcontext,\n\tcontext_request,\n\tcontext_response,\n\tcontext_next, \n\tcontext_accept,\n\tcontext_accept_language\n}\n"]}