{"version":3,"sources":["../../src/lib/server-types.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;AAOb,IAAY,UAQX;AARD,WAAY,UAAU;IACrB,yCAAG,CAAA;IACH,2CAAI,CAAA;IACJ,yCAAG,CAAA;IACH,+CAAM,CAAA;IACN,2CAAI,CAAA;IACJ,iDAAO,CAAA;IACP,6CAAK,CAAA;AACN,CAAC,EARW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAQrB;AAKD;IAAA;IAsBA,CAAC;IAAD,qBAAC;AAAD,CAtBA,AAsBC,IAAA;AAtBY,wCAAc;AA2B3B;IAAwC,6BAAK;IAC3C,mBAAY,IAAY,EACZ,UAAkB,EAClB,OAAe;QAF3B,YAGE,kBAAM,OAAO,CAAC,SAEf;QAJW,gBAAU,GAAV,UAAU,CAAQ;QAClB,aAAO,GAAP,OAAO,CAAQ;QAEzB,KAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;IACnB,CAAC;IACH,gBAAC;AAAD,CAPA,AAOC,CAPuC,KAAK,GAO5C;AAPqB,8BAAS;AAY/B;IAMC,4BAAmB,QAAgB,EAAS,UAAkB;QAA3C,aAAQ,GAAR,QAAQ,CAAQ;QAAS,eAAU,GAAV,UAAU,CAAQ;IAAG,CAAC;IACnE,yBAAC;AAAD,CAPA,AAOC,IAAA;AAPqB,gDAAkB","file":"server-types.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\"; \n\n/**\n * The supported HTTP methods.\n */\nexport enum HttpMethod {\n\tGET,\n\tPOST,\n\tPUT,\n\tDELETE,\n\tHEAD,\n\tOPTIONS,\n\tPATCH\n}\n\n/**\n * Represents the current context of the request being handled.\n */\nexport class ServiceContext {\n\t/**\n\t * The resolved language to be used in the current request handling. \n\t */\n\tlanguage: string;\n\t/**\n\t * The preferred media type to be used in the current request handling. \n\t */\n\taccept: string;\n\t/**\n\t * The request object. \n\t */\n\trequest: express.Request;\n\t/**\n\t * The response object \n\t */\n\tresponse: express.Response; \n\t/**\n\t * The next function. It can be used to delegate to the next middleware\n\t * registered the processing of the current request. \n\t */\n\tnext: express.NextFunction;\n}\n\n/**\n * The Base class for all HTTP errors\n */\nexport abstract class HttpError extends Error {\n  constructor(name: string, \n  \t\t\t  public statusCode: number, \n  \t\t\t  public message: string) {\n    super(message);\n    this.name = name;\n  }\n}\n\n/**\n * Used to create a reference to a resource.\n */\nexport abstract class ReferencedResource {\n\t/**\n\t * Constructor. Receives the location of the resource.\n\t * @param location To be added to the Location header on response\n\t * @param statusCode the response status code to be sent\n\t */\n\tconstructor(public location: string, public statusCode: number) {}\n}\n\n/**\n * The factory used to instantiate the object services\n */\nexport interface ServiceFactory {\n\t/**\n\t * Create a new service object. Called before each request handling.\n\t */\n\tcreate: (serviceClass: Function) => any,\n\t/**\n\t * Return the type used to handle requests to the target service.\n\t * By default, returns the serviceClass received, but you can use this\n\t * to implement IoC integrations.\n\t */\n\tgetTargetClass: (serviceClass: Function) => FunctionConstructor;\n}\n\n"]}